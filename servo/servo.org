#+PROPERTY: header-args :tangle main.asm :mkdirp yes :comments no :padline yes

* License of this work
This work is licensed under the General Public License version 3 (GPLv3).

#+BEGIN_SRC asm
;; Copyright 2019 Christian Gimenez
	   
;; Author: Christian Gimenez

;; main.asm
	   
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
	   
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
	   
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
#+END_SRC

* Usefull macros
The following files includes some interesting macros and do some preliminary stuff.

This file creates the vector table for interruptions. It is not used here because no ~sei~ intruction is used.

#+BEGIN_SRC asm
          ;; Vector table
          .include "../libraries/vector-inc.asm"

          .include "../libraries/registers-inc.asm"
          .text
RESET:
#+END_SRC

* Configure clock

The wave must be setted at high for 1 or 2 ms and then to low for the rest of the 20ms of the PWM period. Depending on the time of the high is the order to the servo motor.

|-------------------------------+-----------|
| Position                      | Time (ms) |
|-------------------------------+-----------|
| Middle (0)                    | 1.5       |
| all the way to the right (90) | 2ms       |
| all the way to the left (-90) | 1ms       |
|-------------------------------+-----------|


** Compare Output Mode
The clock must be at high state when starting and low when the counter matches. This is setted at the *COM1A1 and COM1A0* bits at the TCCR1A register.

The mode needed for this non-inverting mode is the following:

|--------+--------|
| COM1A1 | COM1A0 |
|--------+--------|
|      1 |      0 |
|--------+--------|

** Waveform Generation Mode
The mode for such behaviour is called WGM (Waveform Generation Mode) 14. 

For this, the WGM13, WGM12 and WGM11 bits must be setted to 1. This fields are at the TCCR1A and TCCR1B register.

Then, the following must be setted:

|-------+-------+-------+-------|
| WGM13 | WGM12 | WGM11 | WGM10 |
|-------+-------+-------+-------|
|     1 |     1 |     1 |     0 |
|-------+-------+-------+-------|

** Setting the TCCR1A register

According to the above, the register must be setted at this value:

|--------+--------+--------+--------+---+---+-------+-------|
| COM1A1 | COM1A0 | COM1B1 | COM1B0 | - | - | WGM11 | WGM10 |
|--------+--------+--------+--------+---+---+-------+-------|
|      1 |      0 |      1 |      0 | 0 | 0 |     1 |     0 |
|--------+--------+--------+--------+---+---+-------+-------|

#+BEGIN_SRC asm
	ldi r16, 0b10100010
	sts TCCR1A, r16
#+END_SRC

** Define the TOP value

The TOP value is setted at the Input Capture Register (ICR1) register. Depending on the mode this behaviour can change, but for the WGM 14 mode, the table at the datasheet indicates that the TOP is at ICR1.

Servo motor works with a period of 20ms. The counter must be set that the TOP value resets the counter to 0 when arriving the needed amount of cicles for achieving 20ms.

The calculation is based on the 16MHz of the clock, meaning 1000ms there is 16000000 cicles. For achieving 1ms, the clock must do 16000 cicles, this means that 320000 cicles are needed for 20ms.

A 16 bit register can be used to count up to 65535 cicles. For this reason, a presample must be used to reduce the amount of cicles to count. Doing a presamle of 64 cicles means that the counter will increment one when 64 cicles of clock is achieved (like one presampled cicle will last for 64 cicles of clock).

This will change our values: A millisecond is 16000/64 = 250 cicles, and 20 milliseconds is 250 * 20 = 5000 presampled cicles to count.

#+BEGIN_SRC asm
	;; ICD1 = 4999 (20 ms o 50 Hz) =  1'0011'1000'0111 
	ldi r16, 0b00010011
	sts ICR1H, r16
	ldi r16, 0b10000111
	sts ICR1L, r16
#+END_SRC

** Presample

The presample is setted at the TCCR1B register on the CS12, CS11 and CS10 bits.

The following value will set the presample at 1/64 cicles.

|------+------+------|
| CS12 | CS11 | CS10 |
|------+------+------|
|    0 |    1 |    1 |
|------+------+------|

** Setting the TCCR1B register

According to the above information, the register must be setted at this value:

|-------+-------+---+-------+-------+------+------+------|
| ICNC1 | ICES1 | - | WGM13 | WGM12 | CS12 | CS11 | CS10 |
|-------+-------+---+-------+-------+------+------+------|
|     0 |     0 | 0 |     1 |     1 |    0 |    1 |    1 |
|-------+-------+---+-------+-------+------+------+------|

#+BEGIN_SRC asm
	ldi r16, 0b00011011
	sts TCCR1B, r16
#+END_SRC

* Set the pin directions

** Set the OCR1 direction

The 9th pin at the Arduino UNO board is at the PB1 output of the Atmel processor. The direction for this port is controlled at the DDRB register at the first bit. Setting it to 1 means it will be used as an output port.

#+BEGIN_SRC asm
sbi ODDRB, 1
#+END_SRC

** Set a LED output

The L led in the board is also assigned to the SCR or 6th pin on the Arduino board. To control it the PB5 port must be setted as an output port using the DDRB's 5 bit. 

This led will toggle at each command given to the servo.

#+BEGIN_SRC asm
sbi ODDRB, 5
#+END_SRC

* The loop - Moving the Servo

Moving the servo motor requires to set the OCR1A 16-bit register with a value that the counter can use to follow the 1ms, 1.5ms or 2ms for -90, 0, 90 degrees movement respectivelly.

Considering that 16000/64 = 250 cicles are needed for a millisecond, then 1.5 milliseconds is 250+250/2 = 375 cicles and 2ms is 500 cicles.

|--------+-----+----------|
| Cicles |  ms | Movement |
|--------+-----+----------|
|    250 |   1 | -90      |
|    375 | 1.5 | 0        |
|    500 |   2 | 90       |
|    750 | 2.5 | ¿180?    |
|   1000 |   3 | ¿270?    |
|   1250 | 3.5 | ¿360?    |
|   5000 |  20 |          |
|--------+-----+----------|


First, the Arduino must turn on its led to indicate the first state of the servo.

#+BEGIN_SRC asm
LOOP:
	rcall TURN_ON

#+END_SRC

** Turn -90
Then, the Arduino will turn the servo in -90 degrees with 250 cicles.

#
# For 700 cicles (10'1011'1100 in binary).
#
#     ldi r16, 0b00000010
#     ldi r17, 0b10111100

#+BEGIN_SRC asm
    ldi r16, 0
    ldi r17, 250
	sts OCR1AH, r16
	sts OCR1AL, r17
#+END_SRC

Give some seconds to move the servo.

#+BEGIN_SRC asm
    ldi r16, 0x80
	rcall WAIT
#+END_SRC

** Turn 90
Toggle the led. 

#+BEGIN_SRC asm
	rcall TURN_OFF
#+END_SRC

Send the command for turning the servo in 90 degrees with 500 cicles (1'1111'0100).

#+BEGIN_SRC asm
    ldi r16, 0b00000001
    ldi r17, 0b11110100
	sts OCR1AH, r16
	sts OCR1AL, r17
#+END_SRC

Wait for the servo to move.

#+BEGIN_SRC asm
    ldi r16, 0x80
	rcall WAIT
#+END_SRC

** Repeat the loop

#+BEGIN_SRC asm
	rjmp LOOP
#+END_SRC

* Include the wait file
This line includes the wait-lib file.

#+BEGIN_SRC asm
	.include "../libraries/wait-lib.asm"
#+END_SRC

* Led Commands

This commands toggle the led on and off. First, it is needed to configure the direction of the pin used for the led as "output". This is accomplished in section [[*Set a LED output][Set a LED output]].

According to the Arduino UNO schema, the PB5 is connected to the L led. Thus, there is no need to connect a led and resistence to the pin mentioned.

** Turn on the led
Set the 5th bit on port B and return from the subroutine.

#+BEGIN_SRC asm
TURN_ON:
	sbi OPORTB, 5
	ret
#+END_SRC

** Turn off the led
Clear the 5th bit on port B and return from the subroutine.

#+BEGIN_SRC asm
TURN_OFF:
	cbi OPORTB, 5
	ret
#+END_SRC

* Vector Handlers
This vector handlers are not used. But the vector table imported jumps to here, so the assembler needs these labels defined.

#+BEGIN_SRC asm
	;; __________________________________________________
	;; Vector Handlers
	
EXT_INT0:	; IRQ0 Handler 
EXT_INT1:	; IRQ1 Handler 
PCINT0:		; PCINT0 Handler 
PCINT1:		; PCINT1 Handler 
PCINT2:		; PCINT2 Handler 
WDT:		; Watchdog Timer Handler 
TIM2_COMPA:	; Timer2 Compare A Handler 
TIM2_COMPB:	; Timer2 Compare B Handler 
TIM2_OVF:	; Timer2 Overflow Handler 
TIM1_CAPT:	; Timer1 Capture Handler 
TIM1_COMPA:	; Timer1 Compare A Handler 
TIM1_COMPB:	; Timer1 Compare B Handler 
TIM1_OVF:	; Timer1 Overflow Handler 
TIM0_COMPA:	; Timer0 Compare A Handler 
TIM0_COMPB:	; Timer0 Compare B Handler 
TIM0_OVF:	; Timer0 Overflow Handler 
SPI_STC:	; SPI Transfer Complete Handler 
USART_RXC:	; USART, RX Complete Handler 
USART_UDRE:	; USART, UDR Empty Handler 
USART_TXC:	; USART, TX Complete Handler 
ADC:		; ADC Conversion Complete Handler 
EE_RDY:		; EEPROM Ready Handler 
ANA_COMP:	; Analog Comparator Handler 
TWI:		; 2-wire Serial Interface Handler 
SMP_RDY:	; SPM_RDYStore Program Memory Ready 
#+END_SRC

* End program
This will end the program as soon as ~rjmp END~ is issued. However, is not used because the loop is infinite.

#+BEGIN_SRC asm
	;; __________________________________________________
END:
	nop
#+END_SRC


* Meta     :noexport:

  # ----------------------------------------------------------------------
  #+TITLE:  Servo Assembler code
  #+AUTHOR: Christian Gimenez
  #+DATE:   04 jun 2019
  #+EMAIL:
  #+DESCRIPTION: 
  #+KEYWORDS: 

  #+STARTUP: inlineimages hidestars content hideblocks entitiespretty indent fninline latexpreview
  #+TODO: TODO(t!) CURRENT(c!) PAUSED(p!) | DONE(d!) CANCELED(C!@)
  #+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:{} -:t f:t *:t <:t
  #+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc tex:imagemagick
  #+LINK_UP:   
  #+LINK_HOME: 
  #+XSLT:

  # -- HTML Export
  #+INFOJS_OPT: view:info toc:t ftoc:t ltoc:t mouse:underline buttons:t path:../libs/org-info.js
  #+EXPORT_SELECT_TAGS: export
  #+EXPORT_EXCLUDE_TAGS: noexport
  #+HTML_LINK_UP: ../index.html
  #+HTML_LINK_HOME: ../index.html

  # -- For ox-twbs or HTML Export
  #+HTML_HEAD: <link href="../libs/bootstrap.min.css" rel="stylesheet">
  #+HTML_HEAD: <script src="../libs/jquery.min.js"></script> 
  #+HTML_HEAD: <script src="../libs/bootstrap.min.js"></script>
  #+LANGUAGE: en

  # Local Variables:
  # org-hide-emphasis-markers: t
  # org-use-sub-superscripts: "{}"
  # fill-column: 80
  # visual-line-fringe-indicators: t
  # ispell-local-dictionary: "british"
  # End:
