
Library main template:

#+BEGIN_SRC asm :tangle conversions.asm :noweb yes
<<license>>
<<bite2hex>>
<<div>>
<<div16>>
#+END_SRC


* License
 #+name: license
#+BEGIN_SRC asm
;; Copyright 2021 Christian Gimenez
	   
;; Author: Christian Gimenez

;; usart-lib.asm
	   
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
	   
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
	   
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
#+END_SRC

* Byte to hexadecimal string
Convert a byte to hexadecimal ASCII string. The resulting string is stored in two register: r17 and r18. A 2 byte word can also be converted using this function (calling it twice while saving the results properly).

Parameters:
- r16 :: The byte to convert.

Output:
- r17 :: The higher hexadecimal number as ASCII character.
- r18 :: The lower hexadecimal number as ASCII character.

The r19 register is used to preserve the original number while the r16 is shifted. The lower 4 bits is converted first and its result is stored at r18. Then, the higher 4 bits is converted and stored at r17.

#+name: byte2hex
#+BEGIN_SRC asm :noweb yes
BYTE2HEX:
        push r16
        push r19

        ;; Convert the lower 4 bits
        mov r16, r19
        andi r16, 0b00001111
        rcall .4bits_to_hex
        mov r18, r17

        ;; Convert the higher 4 bits
        mov r19, r16
        andi r16, 0b11110000
        lsr r16
        lsr r16
        lsr r16
        lsr r16
        rcall .4bits_to_hex

        pop r19
        pop r16
        ret

<<byte2hex-4bits>>
#+END_SRC

** Convert 4bits to hex
Parameters:
- r16 :: The four bits to transform (only the lower bits are used).

Output:
- r17 :: The hexadecimal number as ASCII character.

First, clean the input leaving the lower bits only.
If these bits are between 0 and 9, add it to the ASCII code of '0' character. If number is greater than 9, substract 10 and add it to the 'A' ASCII code character.

#+name: byte2hex-4bits
#+BEGIN_SRC asm 
.4bits_to_hex:
	    push r16

	    andi r16, 0b00001111
        cpi r16, 10
        brlo 1f
        ;; r16 is greater or equal than 10
        subi r16, 10
        ldi r17, 'A'
        add r16, r17
        rjmp 2f
1:
        ;; r16 is lower than 10
        ldi r17, '0'
        add r16, r17
2:
        pop r16
        ret
#+END_SRC

* TODO Hexadecimal string to byte
* TODO Byte to decimal string
* TODO Decimal string to byte

* Long Division
Divide two numbers using the long division algorithm and return the quotient ad remainder.

The operation is r16/r17 = r18 and r16 mod r17 = r19.

Parameters:
- r16 :: The dividend or numerator.
- r17 :: The divisor or denominator.

Output:
- r18 :: The quotient
- r19 :: The remainder


The AVR processor does not have the division aperation. Thus, this implementation calculate the division and remainder by applying the typical pen-and-paper long division.

The algorithm is as follows. Be Q the quotient and R the remainder, N/D is the division that is intended to do. n is the amount of bits in N.

#+BEGIN_SRC ada
if D = 0 then raise Exception("Division by zero exception");
Q := 0; R := 0;
for i := n -1 .. 0 loop
    R := R << 1;
    R(0) := N(i);
    if R >= D then
        R := R - D;
        Q(i) := 1;
    end if;
end loop;
#+END_SRC

Before applying the algorithm, some common results are checked:
- if N/1 then return N
- if 0/D then return 0
- if N/N then return 1

#+name: div
#+BEGIN_SRC asm
DIV:
	push r16		; N
	push r17		; D
	push r20		; i

	ldi r18, 0		; Q := 0;
	ldi r19, 0		; R := 0;

	;; if N = 0 (0/D = 0) then return
	cpi r16, 0
	breq 3f
	;; if N = D then return 1
	cp r16, r17
	brne 1f
	ldi r18, 1
	rjmp 3f
1:
	;; if D = 1 (N/1 = N) then return N
	cpi r17, 1		
	brne 4f
	mov r18, r16
	rjmp 3f

4:
	;; Division algorithm
	ldi r20, 8		; for i := 7 .. 0 loop
1:
	lsl r19			; R := R << 1;

				; R(0) := N(i);
	sbrc r16, 7		;     if N(i) is 0, skip instruction
	ori r19, 0x01
	lsl r16			;     simmulates next indexing

	cp r19, r17		; if R >= D then
	brlo 2f
	;; R >= D
	sub r19, r17		; R := R - D;

	ori r18, 0x01		; Q(i) := 1; (continues with lsl r18)
2:
	lsl r18 		; (Part of the Q(i) := 1 or Q(i) := 0).
	dec r20			; end loop;
	cpi r20, 0
	brne 1b

	lsr r18
3:
	pop r20
	pop r17
	pop r16
	ret
#+END_SRC

* Division with 16 bits
Divide two 16 bits unsigned numbers and return the quotient and remainder.

The operation is N/D = (Q ,R). Where all numbers are 16 bits, thus are represented with two 8-bit registers. L means that is the lower byte, H is the higher.

Parameters:
- r16, r17 :: NL and NH respectively.
- r18, r19 :: DL and DH respectively.

Output:
- r20, r21 :: QL and QH respectively.
- r22, r23 :: RL and RH respectively.

The algorithm is simmilar to the division with 8 bits but expanded to two registers.

#+name: div16
#+BEGIN_SRC asm
DIV16:
	push r16		; NL
	push r17		; NH
	push r18		; DL
	push r19		; DH
	push r24		; i

	ldi r20, 0		; Q := 0;
	ldi r21, 0
	ldi r22, 0		; R := 0;
	ldi r23, 0

	;; if N = 0 (0/D = 0) then set results to 0
	cpi r17, 0
	brne 1f
	cpi r16, 0
	brne 1f
	rjmp 3f
1:	
	;; if D = 1 (N/1 = N) then copy N to Q
	cpi r19, 0
	brne 4f
	cpi r18, 1		
	brne 4f
	mov r20, r16
	mov r21, r17	
	rjmp 3f

	;; Division Algorithm
4:
	ldi r24, 16		; for i := 16 .. 1 loop
1:
	clc			; R := R << 1;
	rol r22
	rol r23

				; R(0) := N(i);
	sbrc r17, 7		;     if N(i) is 0, skip instruction
	ori r22, 0x01
	clc			;     simmulates next indexing
	rol r16
	rol r17

	cp r23, r19		; if R >= D then
	brlo 2f
	cp r22, r18
	brlo 2f	
	;; R >= D
	clc			; R := R - D;
	sbc r22, r18
	sbc r23, r19

	ori r20, 0x01		; Q(i) := 1; (continues with lsl r18)
2:
	clc			; (Part of the Q(i) := 1 or Q(i) := 0).
	rol r20
	rol r21
	dec r24			; end loop;
	cpi r24, 0
	brne 1b

	clc
	ror r21
	ror r20
3:
	pop r24
	pop r19
	pop r18
	pop r17
	pop r16
	ret
#+END_SRC


* Example Test

** Division example
#+BEGIN_SRC asm :noweb yes :tangle tests/conversions/div.asm
<<license>>

.include "../../registers-inc.asm"

.set Num, 255
.set Den, 1

.text
RESET:
	rcall LCD_INIT

	ldi r16, Num
	rcall LCD_SENDHEX
	ldi r16, '/'
	rcall LCD_CHAR
	ldi r16, Den
	rcall LCD_SENDHEX	
	ldi r16, '='
	rcall LCD_CHAR
	
	ldi r16, Num
	ldi r17, Den
	rcall DIV

	ldi r16, '('
	rcall LCD_CHAR
	mov r16, r18
	rcall LCD_SENDHEX

	ldi r16, ','
	rcall LCD_CHAR

	mov r16, r19
	rcall LCD_SENDHEX

	ldi r16, ')'
	rcall LCD_CHAR

1:
	sleep
	break
	rjmp 1b

.include "../../lcd-st7066-328p.asm"
.include "../../conversions.asm"
#+END_SRC

** 16 bits Division example
#+BEGIN_SRC asm :noweb yes :tangle tests/conversions/div16.asm
<<license>>

.include "../../registers-inc.asm"

.set NumL, 0xff
.set NumH, 0xff

.set DenL, 0xff
.set DenH, 0x0f

;; Results is: 0xff/0x0fff =  0x10

.text
RESET:
	rcall LCD_INIT

	ldi r16, NumH
	rcall LCD_SENDHEX
	ldi r16, NumL
	rcall LCD_SENDHEX
	ldi r16, '/'
	rcall LCD_CHAR
	ldi r16, DenH
	rcall LCD_SENDHEX
	ldi r16, DenL
	rcall LCD_SENDHEX	
	ldi r16, '='
	rcall LCD_CHAR
	
	ldi r16, NumL
	ldi r17, NumH
	ldi r18, DenL
	ldi r19, DenH
	rcall DIV16

	ldi r16, '('
	rcall LCD_CHAR
	mov r16, r20
	rcall LCD_SENDHEX
	mov r16, r21
	rcall LCD_SENDHEX

	ldi r16, ','
	rcall LCD_CHAR

	mov r16, r22
	rcall LCD_SENDHEX
	mov r16, r23
	rcall LCD_SENDHEX

	ldi r16, ')'
	rcall LCD_CHAR

1:
	sleep
	break
	rjmp 1b

.include "../../lcd-st7066-328p.asm"
.include "../../conversions.asm"
#+END_SRC


* Meta     :noexport:

  # ----------------------------------------------------------------------
  #+TITLE:  Conversions
  #+AUTHOR: Christian Gimenez
  #+DATE:   08 feb 2021
  #+EMAIL:
  #+DESCRIPTION: 
  #+KEYWORDS: 
  #+COLUMNS: %40ITEM(Task) %17Effort(Estimated Effort){:} %CLOCKSUM
  
  #+STARTUP: inlineimages hidestars content hideblocks entitiespretty
  #+STARTUP: indent fninline latexpreview

  #+OPTIONS: H:3 num:t toc:t \n:nil @:t ::t |:t ^:{} -:t f:t *:t <:t
  #+OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  #+OPTIONS: tex:imagemagick

  #+TODO: TODO(t!) CURRENT(c!) PAUSED(p!) | DONE(d!) CANCELED(C!@)

  # -- Export
  #+LANGUAGE: en
  #+LINK_UP:   
  #+LINK_HOME: 
  #+EXPORT_SELECT_TAGS: export
  #+EXPORT_EXCLUDE_TAGS: noexport

  # -- HTML Export
  #+INFOJS_OPT: view:info toc:t ftoc:t ltoc:t mouse:underline buttons:t path:libs/org-info.js
  #+HTML_LINK_UP: index.html
  #+HTML_LINK_HOME: index.html
  #+XSLT:

  # -- For ox-twbs or HTML Export
  # #+HTML_HEAD: <link href="libs/bootstrap.min.css" rel="stylesheet">
  # -- -- LaTeX-CSS
  # #+HTML_HEAD: <link href="css/style-org.css" rel="stylesheet">

  # #+HTML_HEAD: <script src="libs/jquery.min.js"></script> 
  # #+HTML_HEAD: <script src="libs/bootstrap.min.js"></script>


  # -- LaTeX Export
  # #+LATEX_CLASS: article
  # -- -- Tikz
  # #+LATEX_HEADER: \usepackage{tikz}
  # #+LATEX_HEADER: \usetikzlibrary{shapes.geometric}
  # #+LATEX_HEADER: \usetikzlibrary{shapes.symbols}
  # #+LATEX_HEADER: \usetikzlibrary{positioning}
  # #+LATEX_HEADER: \usetikzlibrary{trees}

  # #+LATEX_HEADER_EXTRA:

  # Local Variables:
  # org-hide-emphasis-markers: t
  # org-use-sub-superscripts: "{}"
  # fill-column: 80
  # visual-line-fringe-indicators: t
  # ispell-local-dictionary: "british"
  # End:
