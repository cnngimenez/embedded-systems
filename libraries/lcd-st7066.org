
This library implements assembler subroutines for the LCD screen with ST7066 LCD controller. This device support the HD44780 instruction set.

* Introduction

The following table shows the connections used on the arduino UNO board (ATMega 328p processor).

#+caption: Arduino UNO board connections.
|--------------+-------------+------------+-----------|
| Display port | Display pin | Board Pin  | Port Name |
|--------------+-------------+------------+-----------|
| DB7-DB3      |          14 | Digital 5  | PD2       |
| DB6-DB2      |          13 | Digital 4  | PD3       |
| DB5-DB1      |          12 | Digital 3  | PD4       |
| DB4-DB0      |          11 | Digital 2  | PD5       |
|--------------+-------------+------------+-----------|
| RW           |           5 | Digital 10 | PB2       |
| Enable       |           6 | Digital 11 | PB3       |
| RS           |           4 | Digital 12 | PB4       |
|--------------+-------------+------------+-----------|

Remember that DDRD managest the I/O mode for PDx ports, PIND are the input and PORTD are the output. The same is for PBx ports with DDRB, PINB and PORTB.

#+caption: Arduino Mega board connections.
|--------------+-------------+------------+-----------|
| Display port | Display pin | Board Pin  | Port Name |
|--------------+-------------+------------+-----------|
| DB7-DB3      |          14 | Digital 37 | PC0       |
| DB6-DB2      |          13 | Digital 36 | PC1       |
| DB5-DB1      |          12 | Digital 35 | PC2       |
| DB4-DB0      |          11 | Digital 34 | PC3       |
|--------------+-------------+------------+-----------|
| RW           |           5 | Digital 33 | PC4       |
| Enable       |           6 | Digital 32 | PC5       |
| RS           |           4 | Digital 31 | PC6       |
|--------------+-------------+------------+-----------|

** Two RAMS: DDRAM and CGRAM
This controller has two RAM memories: Display RAM (DDRAM) and Character Generation RAM (CGRAM).

The DDRAM maps the display characters, writing it will make the device show this characters. The characters are represented by numbers (1 byte character) from 0 to 255, which numbers and letters are simmilar to ASCII. For example, writing the number 65 (in ASCII, 65 is the representation of the character "A") at the address 0 to the DDRAM will make the device to show an "A" character at the first position on the LCD, then reading the address 0 will get the number 65.

The CGRAM is used to create new characters.

* The library
The library have the following template:

#+BEGIN_SRC asm :noweb yes :tangle lcd-st7066-328p.asm
<<license>>
<<headers>>
<<lcd_instready>>
<<lcd_send4bits>>
<<set_outputportmode>>
<<blank_ports>>
<<rsrw_macros>>

<<independent_instructions>>
#+END_SRC

The library is very dependant on the port used. However, subroutines that are heavy dependant on the port used are listed separately above.

Thus, when using the Arduino Mega board (with ATMega 2560 processor), these functions must be changed. So, this is the template for the latter board:

#+BEGIN_SRC asm :noweb yes :tangle lcd-st7066-2560.asm
<<license>>
<<headers>>
<<lcd_instready-2560>>
<<lcd_send4bits-2560>>
<<set_outputportmode-2560>>
<<blank_ports-2560>>
<<rsrw_macros-2560>>

<<independent_instructions>>
#+END_SRC

The ~<<independent_instructions>>~ are assembler subroutines that can works regardless of the ports.

#+name: independent_instructions
#+BEGIN_SRC asm :noweb yes
<<lcd_init>>
<<lcd_senddata>>
<<lcd_inst>>
<<lcd_clear>>
<<lcd_home>>
<<lcd_entrymode>>
<<lcd_displaycontrol>>
<<lcd_cdmove>>
<<lcd_fncset>>
<<lcd_cgram_addr>>
<<lcd_ddram_addr>>
<<lcd_char>>
<<lcd_first_row>>
<<lcd_second_row>>
<<lcd_third_row>>
<<lcd_fourth_row>>
<<lcd_string>>
#+END_SRC

  
** License
 #+name: license
#+BEGIN_SRC asm
;; Copyright 2019 Christian Gimenez
	   
;; Author: Christian Gimenez

;; usart-lib.asm
	   
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
	   
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
	   
;; You should have received a copy of the GNU General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.
#+END_SRC

** Include headers
#+name: headers
#+BEGIN_SRC asm
.include "wait-lib.asm"
#+END_SRC

** Tell LCD that instruction is ready                              :private:
Activate and deactivate the enable (E) connection to create a falling edge. This will tell to the LCD controller that the instruction bits are setted and ready to be red.

Basically, turn on the third B port, wait 37\mu{}s then turn it off and wait again. The rest of PORTB is maintained intact.

#+name: lcd_instready
#+BEGIN_SRC asm
.LCD_INSTREADY:
        push r16
        push r17

        sbi OPORTB, 3 ; E
	
        ldi r16, 1
        rcall WAITMS
	
        cbi OPORTB, 3 ; E

        rcall WAITMS

        pop r17
        pop r16
        ret
#+END_SRC

For the ATMega 2560 this code is used:

#+name: lcd_instready-2560
#+BEGIN_SRC asm
.LCD_INSTREADY:
        push r16
        push r17

        sbi OPORTC, 5 ; E
	
        ldi r16, 1
        rcall WAITMS
	
        cbi OPORTC, 5 ; E

        rcall WAITMS

        pop r17
        pop r16
        ret
#+END_SRC

** Send 4-bit data                                            :private:
Send only 4 bit data. This is intended only for initialization or special purposes.

Parameters:
- r16 :: The first four bits of this register is used to send it.

Keep only the first four bits needed, then shift left the r16 register to center the data on the connected port bits.
Read the PORTD pins in order to retain the other bits intact. Then send the center pins new data.

#+name: lcd_send4bits
#+BEGIN_SRC asm
.LCD_SEND4BITS:
        push r17
        push r16

        andi r16, 0b00001111    ; keep the useful data and center it
        lsl r16
        lsl r16
        
        lds r17, PORTD		; Retain the other bits value, just modify the center one.
        andi r17, 0b11000011
        or r17, r16
        out OPORTD, r16
	
        rcall .LCD_INSTREADY

        pop r16
        pop r17
        ret
#+END_SRC

#+name lcd_send4bits-2560
#+BEGIN_SRC asm
.LCD_SEND4BITS:
        push r17
        push r16

        andi r16, 0b00001111    ; keep the useful data and center it
        
        lds r17, PORTC		; Retain the other bits value, just modify the center one.
        andi r17, 0b11110000
        or r17, r16
        out OPORTC, r16
	
        rcall .LCD_INSTREADY

        pop r16
        pop r17
        ret
#+END_SRC

** Set port modes                                                  :private:
The following code define subroutines to set the port modes. In order to send data to the display, the ports must be in output mode.

*** Output mode ports

#+name: set_outputportmode
#+BEGIN_SRC asm
.SET_OUTPUTPORTMODE:
        sbi ODDRD, 2
        sbi ODDRD, 3
        sbi ODDRD, 4
        sbi ODDRD, 5    

        sbi ODDRB, 4 ; RS
        sbi ODDRB, 3 ; E
        sbi ODDRB, 2 ; RW
        ret
#+END_SRC

For the ATMega 2560.

#+name: set_outputportmode-2560
#+BEGIN_SRC asm
.SET_OUTPUTMODE:
        sbi ODDRC, 7
        sbi ODDRC, 6
        sbi ODDRC, 5
        sbi ODDRC, 4    

        sbi ODDRC, 3 ; RS
        sbi ODDRC, 2 ; E
        sbi ODDRC, 1 ; RW
        ret
#+END_SRC

** Blank ports                                                     :private:
This clears the ports reseting them to zero.

#+name: blank_ports
#+BEGIN_SRC asm
.BLANK_PORTS:
        cbi OPORTD, 2
        cbi OPORTD, 3
        cbi OPORTD, 4
        cbi OPORTD, 5

        cbi OPORTB, 4
        cbi OPORTB, 3
        cbi OPORTB, 2
        ret
#+END_SRC

#+name: blank_ports-2560
#+BEGIN_SRC asm
.BLANK_PORTS:
        cbi OPORTC, 7
        cbi OPORTC, 6
        cbi OPORTC, 5
        cbi OPORTC, 4

        cbi OPORTC, 3
        cbi OPORTC, 2
        cbi OPORTC, 1
        ret
#+END_SRC



** Macros to set RS and RW                                         :private:
Sometimes, RS and RW must be setted or cleared. These macros make them a bit more portable to other ports.

#+name: rsrw_macros
#+BEGIN_SRC asm
.macro clear_rs
        cbi OPORTB, 4           ; RS
.endm
.macro clear_rw
        cbi OPORTB, 2           ; RW	
.endm
.macro set_rs
        sbi OPORTB, 4		; RS
.endm
.macro set_rw
        sbi OPORTB, 2		; RW
.endm
#+END_SRC

#+name: rsrw_macros-2560
#+BEGIN_SRC asm
.macro clear_rs
        cbi OPORTC, 6           ; RS
.endm
.macro clear_rw
        cbi OPORTC, 4           ; RW	
.endm
.macro set_rs
        sbi OPORTC, 6		; RS
.endm
.macro set_rw
        sbi OPORTC, 4		; RW
.endm
#+END_SRC


** Initialize LCD subroutine
The board pins must be initialized along with the LCD. In order to give instruction to the LCD

#+name: lcd_init
#+BEGIN_SRC asm :noweb yes
LCD_INIT:
        push r16
        push r17
<<lcd_init-set_ports>>
<<lcd_init-step_1>>
<<lcd_init-step_2>>
<<lcd_init-step_3>>
<<lcd_init-step_4>>
<<lcd_init-step_5>>
<<lcd_init-step_6>>
<<lcd_init-step_7>>
<<lcd_init-step_8>>
<<lcd_init-step_clear_ddram_addr>>
        pop r17
        pop r16
        ret
#+END_SRC

*** Set port modes
Set the Arduino ports in output mode. Firts, set the D ports mode (DDRD) and then the B ports (DDRB). Also, blank the D and B port just in case: set all pins to zero.

#+name: lcd_init-set_ports
#+BEGIN_SRC asm
        rcall .SET_OUTPUTPORTMODE
        rcall .BLANK_PORTS
#+END_SRC

*** Initialization process
The initialization process is required to tell the LCD to use only 4 inputs and not all 8 inputs, to turn on the display and to clear it. Also, it sets it ready to entry mode.

The LCD display supports 8 inputs with E, RS and RW. This means that all instructions are provided with 1 byte: 1 byte is setted on the inputs, E is enabled and disabled to provide the first instruction. But it is possible to use 4 inputs: send the first 4 bits, enable and disable E, and then send the next 4 bits. The ST7066 controller must know which mode is going to be used to get the sequence right.

The sequence start waiting 40 milliseconds.

#+name: lcd_init-step_1
#+BEGIN_SRC asm
        ldi r16, 0x40
        rcall WAITMS
#+END_SRC

Then, send the first function set instruction 0b0011 (RS, RW = 0, 0) and wait. 

#+name: lcd_init-step_2
#+BEGIN_SRC asm
        ldi r16, 0b00000011 	; 0b0011
        rcall .LCD_SEND4BITS

        ldi r16, 5
        rcall WAITMS
#+END_SRC

Send the same instruction twice:

#+name: lcd_init-step_3
#+BEGIN_SRC asm
        ldi r16,0b00000011 	; 0b0011
        rcall .LCD_SEND4BITS

        ldi r16, 1
        rcall WAITMS

	      ldi r16,0b00001100	; 0b0011
        rcall .LCD_SEND4BITS
#+END_SRC

Send instruction 0b0010. After this, normal 8-bit instruction can be sent.

#+name: lcd_init-step_4
#+BEGIN_SRC asm
        ldi r16,0b00000010	; 0b0010
        rcall .LCD_SEND4BITS
#+END_SRC

After that, send the instruction 0x0010_0011 (RS, RW = 0, 0) and wait.
The last 11 mean N,F = 1,1 (N is two line mode enabled and F is double font size).

#+name: lcd_init-step_5
#+BEGIN_SRC asm
        ldi r16, 0b00101100 ; N F
        rcall LCD_INST
#+END_SRC

Turn the display on. This is the instruction 0b0000_1DCB, where D is the display on/off, C is the cursor on/off and B is blinking cursor on/off. At startup, it is best to see the cursor.

#+name: lcd_init-step_6
#+BEGIN_SRC asm
        ldi r16, 0b00001111
        rcall LCD_INST
#+END_SRC

Clear the display. This is the instruction 0b0000_0001. A longer waiting is required to let the LCD controller erase all data.

#+name: lcd_init-step_7
#+BEGIN_SRC asm
        rcall LCD_CLEAR 
#+END_SRC

Send the entry mode set instruction: 0b0000_0110. The last 10 means I/D,S = 1,0, where I/D is the cursor direction and the S is the shift enabled. It is better to leave the shift turned of and the screen static at the startup.

#+name: lcd_init-step_8
#+BEGIN_SRC asm
        ldi r16, 0b00000110
        rcall LCD_INST	
#+END_SRC

A plus, set the DDRAM at position 0. This will enable the user to write a character immediately.

#+name: lcd_init-clear_ddram_addr
#+BEGIN_SRC asm
        ldi r16, 0b00000000
        rcall LCD_DDRAM_ADDR
#+END_SRC

** Send 8-bit data
Send data to the LCD. RS and RW outputs are not touched.

Parameters:
- r16 :: The byte to send to the LCD.

#+name: lcd_senddata
#+BEGIN_SRC asm :noweb yes
LCD_SENDDATA:
        push r18
        push r16

<<lcd_senddata-send>>

        pop r16
        pop r18
        ret
#+END_SRC

This moves the data to the middle bits because the output are connected on them.

Copy the upper four bits, shift the bits to the right and send it. Then, copy the lower four bits, shift the bits to the left and send it.

The shift is needed because the 2nd port (PD2) is used and not the 0 one (PD0).

#+name: lcd_senddata-send
#+BEGIN_SRC asm
        mov r18, r16
        andi r16, 0b11110000	
        lsr r16
        lsr r16
        lsr r16
        lsr r16
        rcall .LCD_SEND4BITS

        mov r16, r18
        andi r16, 0b00001111
        rcall .LCD_SEND4BITS
#+END_SRC

** Send instruction
The following subroutine send an instruction to the LCD controller. The RS and RW is turned off.

Parameters:
- r16 :: Instruction to send (8 bits)

#+name: lcd_inst
#+BEGIN_SRC asm :noweb yes
LCD_INST:
        clear_rs
        clear_rw

        rcall LCD_SENDDATA

        ret
#+END_SRC

** Clear screen instruction
Send the clear screen instruction.

No parameters needed.

Clearing screen requires some time to complete. Thus, 10ms is more than enough to let the controller work.

#+name: lcd_clear
#+BEGIN_SRC asm
LCD_CLEAR:
        push r16
	
        ldi r16, 0b00000001
        rcall LCD_INST

        ldi r16, 10
        rcall WAITMS

        pop r16
        ret
#+END_SRC

** Return home instruction
Send the "return home" instruction.

No parameters needed.

#+name: lcd_home
#+BEGIN_SRC asm
LCD_HOME:
        push r16

        ldi r16, 0b00000010
        rcall LCD_INST

        pop r16
        ret
#+END_SRC

** Entry mode instruction
Send the "entry mode set" instruction. This set the cursor direction (I/D) and enable the shift (S) of the display.

Each time the data is red or written the cursor increments if I/D is 1 and decrements if I/D  = 0. If S is 1, the display shift too, but when S = 0 it does not shift.

Parameters:
- r16 :: Bit 0 is the S parameter (shift display enable/disable). Bit 1 is the I/D parameter (cursor moving direction enable/disable).

#+name: lcd_entrymode
#+BEGIN_SRC asm
LCD_ENTRYMODE:
        push r16

        andi r16, 0b00000011	; Clean the unused bits
        ori r16, 0b00000100
        rcall LCD_INST
	
        pop r16
        ret
#+END_SRC

** Display control instruction
Control the display (D), cursor (C) and cursor blinking (B).

When D = 0 turns off the display (the black leds used to show the character, not the background light). 1 turns it on. C = 1 make the cursor visible, which is the underline below the characters. B = 1 turns on the blinking cursor, it is a black filled box that cover the whole character and blinks.

Parameter:
- r16 :: bit 0 is blinking, bit 1 cursor, bit 2 display enbable/disable.

|-----+---+---+---+---|
|     | 3 | 2 | 1 | 0 |
|-----+---+---+---+---|
| r16 | X | D | C | B |
|-----+---+---+---+---|

#+name: lcd_displaycontrol
#+BEGIN_SRC asm
LCD_DISPLAYCONTROL:
        push r16

        andi r16, 0b00000111	; Clean the unused bits
        ori r16, 0b00001000
        rcall LCD_INST
	
        pop r16
        ret
#+END_SRC

** Cursor or display shift instruction
Move the cursor or display shift left or right.

The S/C bit defines if the cursor or display shift is affected and R/L the direction. If S/C is 0, the display shifts, if 1 the cursor moves. R/L = 0 means to move to the left, 1 is to the right.

Parametesr:
- r16 :: bit 1 is S/C, bit 0 is R/L

|-----+---+---+-----+-----|
|     | 3 | 2 |   1 |   0 |
|-----+---+---+-----+-----|
| r16 | X | X | S/C | R/L |
|-----+---+---+-----+-----|

The controller instruction uses the third and fourth bit, so two Shift Left must be done to move the bits to its proper location. For instance: the controller instruction 0b0001_1100 will set S/C=1 and R/L=1, but the parameter should be 0b0000_0011.

#+name: lcd_cdmove
#+BEGIN_SRC asm
LCD_CDMOVE:
        push r16

        andi r16, 0b00000011	; Clean the unused bits
        lsl r16
        lsl r16
        ori r16, 0b00010000
        rcall LCD_INST
	
        pop r16
        ret
#+END_SRC

** Function set instruction
Send the function set instruction to the controller.

This instruction controls the display lines (N) and the font size (F). Two display line options can be selected: one-line display or two-line display (in bigger LCD displays are two-line display or four-line display). If one-line display is setted, two possible font size can be used: 5x8 dots character font or 5x10 dots character font. The following table summarizes all possible options:

|---+---+---------------+----------------|
| N | F | Display lines | Character Font |
|---+---+---------------+----------------|
| 0 | 0 |             1 | 5 x 8 dots     |
| 0 | 1 |             1 | 5 x 10 dots    |
| 1 | X |             2 | 5 x 8 dots     |
|---+---+---------------+----------------|

Parameter:
- r16 :: bit 1 is the N parameter, bit 0 is the F parameter.

|-----+---+---+---+---|
|     | 3 | 2 | 1 | 0 |
|-----+---+---+---+---|
| r16 | X | X | N | F |
|-----+---+---+---+---|

The controller function set instruction has three parameters: DL, N and F. DL is to set the interface data length between 4-bits or 8-bits. This library is intended to work only for 4-bits (4 pins or 4 connections to the data input on the LCD display module + RW, RS and E connections). In order to avoid setting the wrong configuration, the DL is not present on the parameter.

#+name: lcd_fncset
#+BEGIN_SRC asm
LCD_FNCSET:
        push r16

        andi r16, 0b00000011	; Clean the unused bits
        lsl r16
        lsl r16
        ori r16, 0b00100000
        rcall LCD_INST

        pop r16
        ret
#+END_SRC

** Set CGRAM Address instruction
Set the Character Generator RAM address. If this instruction is used, the next data written or red will use this RAM instead of the DDRAM.

Parameter:
- r16 :: The address of the CGRAM to set. Only 0-5 bits are used.

|-----+---+---+---+---+---+---+---+---|
|     | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
|-----+---+---+---+---+---+---+---+---|
| r16 | X | X | a | a | a | a | a | a |
|-----+---+---+---+---+---+---+---+---|

#+name: lcd_cgram_addr
#+BEGIN_SRC asm
LCD_CGRAM_ADDR:
        push r16

        andi r16, 0b00111111	; Clean the unused bits
        ori r16, 0b01000000
        rcall LCD_INST
	
        pop r16
        ret
#+END_SRC

** Set DDRAM address instruction
Set the DDRAM address and toggle the DDRAM usage instead of the CGRAM. Any character sended after this will set the DDRAM data and not the CGRAM data.

Parameters:
- r16 :: The DDRAM address. Only bits 0-6 will be used.

#+name: lcd_ddram_addr
#+BEGIN_SRC asm
LCD_DDRAM_ADDR:
        push r16
	
        ori r16, 0b10000000
        rcall LCD_INST

        pop r16
        ret
#+END_SRC

** Send character instruction
Send a character to the LCD controller. The RS and RW must be setted accordingly.

Parameters:
- r16 :: Character byte to send.

#+name: lcd_char
#+BEGIN_SRC asm
LCD_CHAR:
        set_rs
        clear_rw

        rcall LCD_SENDDATA

        clear_rs
        ret
#+END_SRC

** Goto first row
Move the cursor to the first row. This is the same as return home.

#+name: lcd_first_row
#+BEGIN_SRC asm
LCD_FIRST_ROW:
        rcall LCD_HOME
        ret
#+END_SRC

** Goto second row
Move the cursor to the second row.

#+name: lcd_second_row
#+BEGIN_SRC asm
LCD_SECOND_ROW:
        push r16

        ldi r16, 40
        rcall LCD_DDRAM_ADDR

        pop r16
        ret
#+END_SRC

** Goto third row
Move the cursor to the third row.

#+name: lcd_third_row
#+BEGIN_SRC asm
LCD_THIRD_ROW:
        push r16

        ldi r16, 20
        rcall LCD_DDRAM_ADDR

        pop r16
        ret
#+END_SRC

** Goto fourth row
Move the cursor to the fourth row.

#+name: lcd_fourth_row
#+BEGIN_SRC asm
LCD_FOURTH_ROW:
        push r16

        ldi r16, 60
        rcall LCD_DDRAM_ADDR

        pop r16
        ret
#+END_SRC


** Send string
Send characters to the LCD controller up to the zeroed character. The string must be stored on RAM.

Parameter:
- XL, XH :: The starting RAM address to read.
- r16 :: The milliseconds to wait between characters.

X register is used to store the memory address. Then, r16 is used to store the character red. The repetition stop when r16 is 0 (the null character is red).

#+name: lcd_string
#+BEGIN_SRC asm
LCD_STRING:
        push XL
        push XH
        push r16
        push r17

        mov r17, r16
1:
        ld r16, X+
        cpi r16, 0
        breq 2f			; if r16 = 0 then end subroutine

        rcall LCD_CHAR		; if r16 /= 0 then send char

        cpi r17,0
        breq 1b			; r17 is zero, no need to wait
        mov r16, r17
        rcall WAITMS
	
        rjmp 1b

2:
        pop r17
        pop r16
        pop XH
        pop XL
        ret
#+END_SRC


* Hello world example
This is a basic Hello world example. It can be used to test if the connection and the display works properly.

#+BEGIN_SRC asm :noweb yes :tangle tests/lcd-st7066/hello.asm
<<license>>

;; .include "../../vector-inc.asm"
.include "../../registers-inc.asm"

.text
RESET:
      rcall LCD_INIT

	ldi r16, 'H'
	rcall LCD_CHAR
	ldi r16, 'e'
	rcall LCD_CHAR
	ldi r16, 'l'
	rcall LCD_CHAR
	ldi r16, 'l'
	rcall LCD_CHAR
	ldi r16, 'O'
	rcall LCD_CHAR


1:
	sleep
	break
	rjmp 1b
.include "../../lcd-st7066-328p.asm"
#+END_SRC


* Hello world with string example
This example shows how to load a string into the ATMega memory and display it on the LCD.

#+BEGIN_SRC asm :noweb yes :tangle tests/lcd-st7066/hello_str.asm
<<license>>

;; .include "../../vector-inc.asm"
.include "../../registers-inc.asm"

<<data>>
	
.text
RESET:
	rcall .COPY_TO_RAM
	
      rcall LCD_INIT

	ldi r16, 0b00000110
	rcall LCD_DISPLAYCONTROL
	
	ldi r16, 255
	ldi XL, lo8(.str_hello)
	ldi XH, hi8(.str_hello)
	rcall LCD_STRING

	rcall LCD_SECOND_ROW

	ldi r16, 255
	ldi XL, lo8(.str_kanas)
	ldi XH, hi8(.str_kanas)
	rcall LCD_STRING

1:
	sleep
	break
	rjmp 1b

<<copy_to_ram>>

.include "../../lcd-st7066-328p.asm"

STATIC_DATA:
#+END_SRC

** Store string in the program
The following code will tell the assembler to store a string into the program memory. It also gives a name to the RAM address. Remember that this will be stored on the program memory, not the RAM, but the address returned on the labels are from the RAM.

The assembler program needs to know where the ".rodata" section should be. This information can be provided as a parameter when calling the assembler (~as~) program. 328p processors should use 0x0100 at starting address for .rodata, thus the parameter ~-Tdata=0x800100~ should be added to the linker.

This means that ~.str_hello~ label will be mapped to the RAM address, but the string itself will be at the last portion of the program.

The ~.string~ pseudo-op adds the zero character at the end of the string. The ~data_length~ assembler variable is setted to the length of the whole characters stored (the size of the memory occupied).

#+name: data
#+BEGIN_SRC asm
.section .rodata

.data_start:
.str_hello:
	.string "Hello World"

.str_kanas:
	.byte 0b10111010, 0b11011101, 0b11000110, 0b11000001, 0b11011100, 0b10111110, 0b10110110, 0b10110010, 0

.set data_length, 25
#+END_SRC

** Copy the string to RAM
Z stores the program address where the data is, X stores the RAM address.

Parameters:
- XL, XH :: The RAM memory.
- ZL, ZH :: The program memory

#+name: copy_to_ram
#+BEGIN_SRC asm
.COPY_TO_RAM:
	push ZL
	push ZH
	push XL
	push XH
	push r17
	push r16

	ldi r17, data_length
	ldi ZL, lo8(STATIC_DATA)
	ldi ZH, hi8(STATIC_DATA)
	ldi XL, lo8(.data_start)
	ldi XH, hi8(.data_start)
	
1:
	lpm r16, Z+
	cpi r17, 0
	breq 2f
	
	dec r17
	st X+, r16
	rjmp 1b

2:
	st X+, r16

	pop r16
	pop r17
	pop XH
	pop XL
	pop ZH
	pop ZL
	ret
#+END_SRC


* Number test
This example show the position of each cell by printing one digit after another.

The register r17 contains the character from '0' to '9'. 

#+BEGIN_SRC asm :noweb yes :tangle tests/lcd-st7066/numbers.asm
<<license>>

.include "../../registers-inc.asm"
.text
RESET:
	rcall LCD_INIT
2:

	ldi r17, '0'		; r17 : char to show
	dec r17
1:
	inc r17
	mov r16, r17
	rcall LCD_CHAR

	ldi r16, 250
	rcall WAITMS
	ldi r16, 250
	rcall WAITMS

	cpi r17, '9'
	brne 1b
	rjmp 2b

.include "../../lcd-st7066-328p.asm"
#+END_SRC


* Meta     :noexport:

  # ----------------------------------------------------------------------
  #+TITLE:  LCD with ST7066 LCD Controller
  #+AUTHOR: Christian Gimenez
  #+DATE:   06 feb 2021
  #+EMAIL:
  #+DESCRIPTION: 
  #+KEYWORDS: 
  #+COLUMNS: %40ITEM(Task) %17Effort(Estimated Effort){:} %CLOCKSUM
  
  #+STARTUP: inlineimages hidestars content hideblocks entitiespretty
  #+STARTUP: indent fninline latexpreview

  #+OPTIONS: H:3 num:t toc:t \n:nil @:t ::t |:t ^:{} -:t f:t *:t <:t
  #+OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
  #+OPTIONS: tex:imagemagick

  #+TODO: TODO(t!) CURRENT(c!) PAUSED(p!) | DONE(d!) CANCELED(C!@)

  # -- Export
  #+LANGUAGE: en
  #+LINK_UP:   
  #+LINK_HOME: 
  #+EXPORT_SELECT_TAGS: export
  #+EXPORT_EXCLUDE_TAGS: noexport

  # -- HTML Export
  #+INFOJS_OPT: view:info toc:t ftoc:t ltoc:t mouse:underline buttons:t path:libs/org-info.js
  #+HTML_LINK_UP: index.html
  #+HTML_LINK_HOME: index.html
  #+XSLT:

  # -- For ox-twbs or HTML Export
  # #+HTML_HEAD: <link href="libs/bootstrap.min.css" rel="stylesheet">
  # -- -- LaTeX-CSS
  # #+HTML_HEAD: <link href="css/style-org.css" rel="stylesheet">

  # #+HTML_HEAD: <script src="libs/jquery.min.js"></script> 
  # #+HTML_HEAD: <script src="libs/bootstrap.min.js"></script>


  # -- LaTeX Export
  # #+LATEX_CLASS: article
  # -- -- Tikz
  # #+LATEX_HEADER: \usepackage{tikz}
  # #+LATEX_HEADER: \usetikzlibrary{shapes.geometric}
  # #+LATEX_HEADER: \usetikzlibrary{shapes.symbols}
  # #+LATEX_HEADER: \usetikzlibrary{positioning}
  # #+LATEX_HEADER: \usetikzlibrary{trees}

  # #+LATEX_HEADER_EXTRA:

  # Local Variables:
  # org-hide-emphasis-markers: t
  # org-use-sub-superscripts: "{}"
  # fill-column: 80
  # visual-line-fringe-indicators: t
  # ispell-local-dictionary: "british"
  # org-src-preserve-indentation: t
  # End:
