
* Introduction
The SD card has got a simple command processor. The communication between the Arduino and the SD card is through the Serial Peripheral Interface (SPI) protocol. 

In this section, an introductory information is presented for proper understanding of the driver implementation.

** Pin Connections
The SD card use Serial Peripheral Interface (SPI) protocol. The module must be connected to an Arduino UNO board according to the following table.

|-----------+-------------+--------------------|
| Board Pin | ATMega Port | SD card Module PIN |
|-----------+-------------+--------------------|
|        13 | PB5         | SCK                |
|        12 | PB4         | MISO               |
|        11 | PB3         | MOSI               |
|        10 | PB2         | SS (also CS)       |
|-----------+-------------+--------------------|

** Port Directions
When SPI is enabled, the direction of the pins is overriden according to master/slave configuration. The following table shows these pins and their directions.

|--------+------------------+-----------------|
| PIN    | Master Direction | Slave Direction |
|--------+------------------+-----------------|
| MOSI   | User Defined     | Input           |
| MISO   | Input            | User Defined    |
| SCK    | User Defined     | Input           |
| Not SS | User Defined     | Input           |
|--------+------------------+-----------------|

The SPI protocol use the following registers:

|----------------------+------------+-------------|
| Register full name   | Short name | Address     |
|----------------------+------------+-------------|
| SPI Control Register | SPCR       | 0x2c (0x4c) |
| SPI Status Register  | SPSR       | 0x2D (0x4D) |
| SPI Data Register    | SPDR       | 0x2E (0x4E) |
|----------------------+------------+-------------|

For using the SD card, the Arduino SPI controller must be setted as master. 

The guide posted at www.dejazzer.com/ee379/lecture_notes/lec12_sd_card.pdf by Cristinel Ababei is used as a reference for SPI modes and SD cards usage.

** SD Card commands
The SD card receives commands and send responses from it. Commands consists of 48 bits with the following format:

| /     |  < |    |                |           |         | > |
|-------+----+----+----------------+-----------+---------+---|
| Bits  | 47 | 46 | 45 ... 40      | 39 ... 8  | 7 ... 1 | 0 |
|-------+----+----+----------------+-----------+---------+---|
| Value |  0 |  1 | Command Number | Arguments | CRC     | 1 |
|-------+----+----+----------------+-----------+---------+---|

For any transaction (i.e. sending or receiving information) the CS/SS bit must be low.

A reference of all the commands are available at the "SD Specification Part 1 Physical Layer Simplified Specification" at the https://www.sdcard.org/ Web page. Ensure to refer to the SPI commands and not others in the specification.

*** Example
A command example is the CMD0 for reseting the SD card. The SPI must send the command by sending each byte at a time. First, it must rise the MOSI to high and the CS to low. Second, after each clock edge, send bit by bit. Third, rise the MOSI and read the values of MISO ignoring the bits that starts with 1 at each edge clock.

The numbers of the CMD0 are the following:

: 01 000000 00000000 00000000 00000000 00000000 1001010 1

In hexadecimal: 

: 0x40 00 00 00 00 95

The card may answer a sequence of high bits and then the success with following bits.

: 11111111 11111111 00000001 11111111 ...
: 0xFF FF 01 FF ..

A sequence of 0xFF means that the card is busy or waiting for commands. All answer formats start with 0 at its 7th bits and end with 1 to detect when they begin and end.

** Response format
The commands can answer in the following formats.
*** R1
|------+----------------------|
| Bits | Description          |
|------+----------------------|
|    7 | Value 0              |
|    6 | parameter error      |
|    5 | address error        |
|    4 | erase sequence error |
|    3 | com crc error        |
|    2 | illegal command      |
|    1 | erase reset          |
|    0 | Idle state           |
|------+----------------------|

- In idle state :: The card is in idle state and running the initialization process.
- Erase Reset :: An erase sequence was cleared.
- Illegal command :: An illegal code has been detected.
- Communication CRC error :: The CRC check of the last command failed.
- Erase sequence error :: An error in the erase sequence commands ocurred.
- Address Error :: A misaligned address that did not match the block length.
- Parameter error :: The argument was outside the allowed range.
**** R1b
*** R2
*** R4 and R5
*** R3

|-------+--------------|
|  Bits | Description  |
|-------+--------------|
| 39-32 | Same as R1   |
|  31-0 | OCR register |
|-------+--------------|

*** R7
Is a 40 bits (5 bytes) response.

|-------+------------------|
|  Bits | Description      |
|-------+------------------|
| 39-32 | Same as R1       |
|-------+------------------|
| 31-28 | Command version  |
| 27-12 | Reserved         |
|  11-8 | Voltage accepted |
|-------+------------------|
|   7-0 | Echo back        |
|-------+------------------|

** SD Card Registers
The SD card has got some registers that can ve transmitted by some commands.

*** Operation Condition Register - OCR
The SPI comand CMD58 retrieve the Operation Condition Register (OCR). It is a 32 bits register which stores the V_{dd} voltage profile and other status bits.

|-------+---------------------------------|
|  Bits | Description                     |
|-------+---------------------------------|
|   0-6 | Reserved                        |
|     7 | Reserved for low voltage range  |
|-------+---------------------------------|
|  8-14 | Reserved                        |
|    15 | 2.7-2.8                         |
|-------+---------------------------------|
|    16 | 2.8-2.9                         |
|    17 | 2.9-3.0                         |
|    18 | 3.0-3.1                         |
|    19 | 3.1-3.2                         |
|    20 | 3.2-3.3                         |
|    21 | 3.3-3.4                         |
|    22 | 3.4-3.5                         |
|    23 | 3.5-3.6                         |
|-------+---------------------------------|
|    24 | Switching to 1.8V accepted      |
| 25-28 | Reserved                        |
|    29 | UHS-II Card Status              |
|    30 | Card Capacity Status (CSS)      |
|    31 | Card power up status bit (busy) |
|-------+---------------------------------|

VDD Voltage window is between bits 0 and 23.

The 7th bit is 0 for cards version 1.0. It is 1 for version 2.0 and can receive the CMD8 command. It indicates the Dual Voltage Card property.

The 24th bit is supported by UHS-I cards.

The 30th bit is valid when the card power up status bit is set. 1 indicates that the card is SDHC or SDXC, 0 indicates that the card is SDSC.

The 31st bit is low when the power up routine is not ready.


* SD card Driver Header
:PROPERTIES:
:header-args: :comments no :padline yes :tangle sdcard.h
:END:

** License
This work is under the GPL v3 license. 

#+BEGIN_SRC c
/* 
   Copyright 2019 Christian Gimenez
   
   Author: Christian Gimenez   

   sdcard.h
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#+END_SRC

** Begin header
Avoid including this file twice.
#+BEGIN_SRC c
#ifndef _SDCARD_H
#define _SDCARD_H 1
#+END_SRC

** Include other headers

#+BEGIN_SRC c
#include <stdint.h>
#+END_SRC

** Constants and Macros

*** Use Byte or Block Address
These are used by the ~sdcard_use_address()~ function and ~use_address~ variable. This variable is setted on SD card initialization.

~USE_ADDRESS_UNDEFINED~ is setted when v.1 cards is detected.

See section [[*Use byte or block address][Use byte or block address]].

#+BEGIN_SRC c
#define USE_ADDRESS_UNDEFINED 0x00
#define USE_BYTE_ADDRESS 0x01
#define USE_BLOCK_ADDRESS 0x02
#+END_SRC

*** Initialization stop macros
These macros defines literals for the ~stop_at_step~ initialization parameter.

#+BEGIN_SRC c
#define INIT_STOP_NONE 0
#define INIT_STOP_SPI 1
#define INIT_STOP_CMD0 2
#define INIT_STOP_CMD8 3
#+END_SRC

** Functions
Initialize the SPI for connecting with the SD card

#+BEGIN_SRC c
uint8_t sdcard_init(uint8_t stop_at_step);
uint8_t sdcard_send_acmd(uint8_t acmd, uint32_t args);
void sdcard_send_command(uint8_t command, uint32_t arguments);
void sdcard_send_command_raw(uint8_t cmd[6]);
#+END_SRC

Receive a byte of data from the SD card. If ~check_0xff~ is 1, then keep receiving data until no 0xff is received. This parameter is useful for ignoring idle high values at the first data after a command is issued. 

If ~check_0xff~ is 1 and the return value is 0xff it means that the timeout has been reached.

#+BEGIN_SRC c
uint8_t sdcard_receive(uint8_t check_0xff);
#+END_SRC

** Get information
Return the last command sent.

#+BEGIN_SRC c
uint8_t* sdcard_last_cmd();
#+END_SRC

Return if the SD card use byte or block addresses. One of the numbers described at section [[*Use Byte or Block Address][Use Byte or Block Address]] is returned.

#+BEGIN_SRC c
uint8_t sdcard_use_address();
#+END_SRC

** End Header
#+BEGIN_SRC c
#endif // _SDCARD_H
#+END_SRC

* SD card Driver Body
:PROPERTIES:
:header-args: :comments no :padline yes :tangle sdcard.c
:END:

** License
This work is under the GPL v3 license. 

#+BEGIN_SRC c
/* 
   Copyright 2019 Christian Gimenez
   
   Author: Christian Gimenez   

   sdcard.c
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#+END_SRC

** Headers needed
Include the sdcard header.

#+BEGIN_SRC c
#include "sdcard.h"
#+END_SRC


Include the AVR IO header for using the port and register names.

#+BEGIN_SRC c
#include <avr/io.h>
#+END_SRC

Include the standard integer types. This adds the ~uint8_t~ type (unsigned eight bits type).

#+BEGIN_SRC c
#include <stdint.h>
#+END_SRC

** Structure
This maps a readable structure into the register memory.

#+BEGIN_SRC c
typedef struct {
  uint8_t spcr; // 0x4C
  uint8_t spsr; // 0x4D
  uint8_t spdr; // 0x4E
} volatile spi_t;
#+END_SRC

Map the structure into the start of the SPI registers.

#+BEGIN_SRC c
volatile spi_t *spi = (spi_t*) (0x4c);
#+END_SRC

*** Pins
Port B input/outputs (5, 4, 3 and 2) are needed.

#+BEGIN_SRC c
volatile uint8_t* portb = (uint8_t*) (0x25);
volatile uint8_t* ddrb = (uint8_t*) (0x24);
volatile uint8_t* pinb = (uint8_t*) (0x23);
#+END_SRC

** Variables
*** Last command
This variable will hold the last command sendt.

#+BEGIN_SRC c
uint8_t last_cmd[6] = {0,0,0,0,0,0};
#+END_SRC
*** Use byte or block address
This value depends on the card version and type. If the card is SD Ver. 2 it can have a byte (SDSC) or block (SDHC/SDXC) address. 

~USE_ADDRESS_UNDEFINED~ is used for v.1 cards.

This is value is setted at SD card initialization. See section [[*SD version 2][SD version 2]].

#+BEGIN_SRC c
uint8_t use_address = USE_ADDRESS_UNDEFINED;
#+END_SRC

** Set MOSI, and CS
The following functions set the MOSI and CS to the desired value.

#+BEGIN_SRC c
void mosi_on(){
  *portb |= (1<<PB3);
} // mosi_on
void cs_on(){
  *portb |= (1<<PB2);
} // cs_on

void mosi_off(){
  *portb &= 0b11110111; 
} // mosi_off
void cs_off(){
  *portb &= 0b11111011;
} // cs_off
#+END_SRC

** Calculate CRC
Most commands need a CRC7 bits. The following code is retrieved from https://stackoverflow.com/questions/49672644/cant-figure-out-how-to-calculate-crc7

#+BEGIN_SRC c
unsigned char CRC7(const unsigned char message[], const unsigned int length) {
  const unsigned char poly = 0b10001001;
  unsigned char crc = 0;
  for (unsigned i = 0; i < length; i++) {
     crc ^= message[i];
     for (int j = 0; j < 8; j++) {
      // crc = crc & 0x1 ? (crc >> 1) ^ poly : crc >> 1;       
      crc = (crc & 0x80u) ? ((crc << 1) ^ (poly << 1)) : (crc << 1);
    }
  }
  //return crc;
  return crc >> 1;
}
#+END_SRC

** Send Data through SPI
Send a byte through SPI and wait until it is transmitted.

"Wait until the transmission is complete" means until the SPSR register has the SPIF bit in 1.

#+BEGIN_SRC c
void send_byte(uint8_t byte){
  spi->spdr = byte;
  while (! (spi->spsr & (1<<SPIF)));
} // send_byte
#+END_SRC

** Send Command Raw Function
This function sends a command to the SD card. Each command has 48 bits (6 bytes). However, the SPI controller at ATmega has a data register of 8 bits which means it has to be setted 6 times to send all the command.

#+BEGIN_SRC c
void sdcard_send_command_raw(uint8_t command[6]){
  uint8_t i;
#+END_SRC

Save the command to the ~last_cmd~ variable.

#+BEGIN_SRC c
for (i = 0; i < 6; i++){
  last_cmd[i] = command[i];
}
#+END_SRC

The CS must be at 0. 

#+BEGIN_SRC c
  cs_off();
#+END_SRC

Wait until the device is not busy. If for some reason the device is sending data, it will not be 0xFF. When the device is idle it will set MISO in 1 when seting MOSI in 1.

#+BEGIN_SRC c
send_byte(0xff);
while (spi->spdr != 0xff){
  send_byte(0xff);
}
#+END_SRC

Send all the bytes. Remember that ~send_byte()~ will set the SPDR with data and wait until all of the bits were transmitted.

#+BEGIN_SRC c
  for (i = 0; i < 6; i++){
    send_byte(command[i]);
  } // for
#+END_SRC

End the function.

#+BEGIN_SRC c
} // sdcard_send_command_raw
#+END_SRC

** Send Command Function
This is a simplified version of the ~sdcard_send_command_raw~ function.

Considering that the command number has 6 bits, an 8 bits parameter can be used. The arguments can have 32 bits available.

#+BEGIN_SRC c
void sdcard_send_command(uint8_t command, uint32_t argument){
#+END_SRC

#+BEGIN_SRC c
uint8_t cmd[6] = {0, 0, 0, 0, 0, 0};
#+END_SRC

The first bits are always ~0b01~. The last bit too. Also, set the command argument.

#+BEGIN_SRC c
cmd[0] = 0b01000000 | (0b00111111 & command);
#+END_SRC

Set the arguments.

#+BEGIN_SRC c
cmd[1] = (argument>>24);
cmd[2] = 0b11111111 & (argument>>16);
cmd[3] = 0b11111111 & (argument>>8);
cmd[4] = 0b11111111 & argument;
#+END_SRC

Calculate the CRC7. The last bit is always 1.

#+BEGIN_SRC c
cmd[5] = CRC7(cmd, 5);
cmd[5] = (cmd[5]<<1) | 0b00000001;
#+END_SRC

Send the command.

#+BEGIN_SRC c
sdcard_send_command_raw(cmd);
#+END_SRC


#+BEGIN_SRC c
} // sdcard_send_command
#+END_SRC

** Send ACMD command function
For sending an Application specific Command (ACMD), it must be preceded by the CMD55 command.

#+BEGIN_SRC c
uint8_t sdcard_send_acmd(uint8_t acmd, uint32_t args){
#+END_SRC

First, send the CMD55 command.

#+BEGIN_SRC c
sdcard_send_command(55,0);
#+END_SRC

Receive the answer. The CMD55 uses the R1 answer format. If it is not 0x01, then return that something goes wrong.

#+BEGIN_SRC c
uint8_t resp = 0;
do {
  resp = sdcard_receive(0);
} while (resp & 0x80);

if (resp != 0x01) return 0;
#+END_SRC

Now send the ACMD command as it is a common CMDn command.

#+BEGIN_SRC c
sdcard_send_command(acmd, args);
#+END_SRC

End function.

#+BEGIN_SRC c
  return 1;
} // sdcard_send_acmd
#+END_SRC

** Receive Response
This function receive a response from the SD card.

#+BEGIN_SRC c
uint8_t sdcard_receive(uint8_t check_0xff){
#+END_SRC

First, set MOSI high and CS low.

#+BEGIN_SRC c
cs_off();
spi->spdr = 0xff;
#+END_SRC

Now wait for the answer. The SPIF bit at the SPSR register is 1 when transfer is complete.

#+BEGIN_SRC c
while (! (spi->spsr & (1<<SPIF)));
#+END_SRC

Read the data.

#+BEGIN_SRC c
uint8_t data = spi->spdr;
#+END_SRC

If ~check_0xff~ parameter is 1, then repeat the process until receiving a diferent data than 0xff.

#+BEGIN_SRC c
cs_on();
if (check_0xff){
  uint8_t timeout = 0;
  while ((data == 0xff) && (timeout < 100)){

    cs_off();
    spi->spdr = 0xff;
    while (! (spi->spsr & (1<<SPIF)));
    data = spi->spdr;
    cs_on();

    timeout++;
  }
  // No need to check. It will return the data nevertheless.
}
#+END_SRC

Activate the CS bit and return the data.

#+BEGIN_SRC c
cs_on();
return data;
#+END_SRC

#+BEGIN_SRC c
} // sdcard_receive
#+END_SRC

** Auxiliary functions for the initialization
*** Send CMD58 command
Send this command to read the CCS bit in OCR register. Se section [[*Operation Condition Register - OCR][Operation Condition Register - OCR]] for more information.

The CMD58 response has got an R3 format. See section [[*R3][R3]] for the bits description. 

The ~results~ value is an array of 5 bytes (~uint8_t~ types). It will be filled with the complete R3 response. 

#+BEGIN_SRC c
void send_cmd58(uint8_t results[5]){
  sdcard_send_command(58, 0);

  uint8_t resp;

  resp = sdcard_receive(1);

  results[0] = resp;
  results[1] = sdcard_receive(0);
  results[2] = sdcard_receive(0);
  results[3] = sdcard_receive(0);
  results[4] = sdcard_receive(0);
} // send_cmd58
#+END_SRC

*** Get Capacity function for V.2 cards
This function is used when a V.2 card is detected. After the CMD8 is answered by the card, an ACMD41 instruction must be sent in order to tell the card to initialize.

This function returns the response of the ACMD41's R1 answer. In other words, 0x00 if success. 

#+BEGIN_SRC c
uint8_t get_v2_capacity(){

  uint8_t resp, timeout;
#+END_SRC

Send the ACMD41 command while the R1 resp is 0x01. The 0x40000000 parameter (30th bit enabled) means that the host support SDHC or SDXC. This bit is called Host Capacity Support (HCS).

#+BEGIN_SRC c
  timeout = 0;
  
  do {
    sdcard_send_acmd(41,0x40000000);
    resp = sdcard_receive(1);
    if (resp == 0xff) return 255;
  
    timeout++;
  } while ((resp == 0x01) && (timeout < 100));
  if (timeout == 100) return 255;
#+END_SRC

If the answer is an error (not 0x00), then the initialization has failed. Else, everything is all right. In other words, return ~resp~.

#+BEGIN_SRC c
  return resp;  
#+END_SRC

End the function.

#+BEGIN_SRC c
} // get_v2_capacity
#+END_SRC

*** Get Capacity function for V.1 cards
Same as the section [[*Get Capacity function for V.2 cards][Get Capacity function for V.2 cards]], but use zero as parameter of the ACMD41.

This function returns the response of the ACMD41's R1 answer. In other words, 0x00 if success. 

#+BEGIN_SRC c
uint8_t get_v1_capacity(){
  uint8_t resp, timeout;
  timeout = 0; 
  
  do {
    sdcard_send_acmd(41,0x00000000);
    resp = sdcard_receive(1);
    if (resp == 0xff) return 255;
  
    timeout++;
  } while ((resp == 0x01) && (timeout < 100));
  if (timeout == 100) return 255;
  
  return resp;
} // get_v1_capacity
#+END_SRC


The ACMD41 0x0 parameter disables the Host Capacity Support (HCS) at the 30th bit. This means that host supports neither SDHC nor SDXC cards.

*** Get Capacity function for MMC V.3 cards
For MMC cards, the CMD1 command must be sent. Is the same as ACMD41 but is available for Thin (1.4mm) standard size SD memory card.

This function returns the response of the CMD1's R1 answer. In other words, 0x00 if success. 

#+BEGIN_SRC c
uint8_t get_mmc_capacity(){
#+END_SRC

Send the CMD1 without HCS support. If the answer is 0x01 repeat the command.

#+BEGIN_SRC c
  uint8_t resp, timeout, timeout2;
  timeout = 0; timeout2 = 0;

  do {
    sdcard_send_command(1,0x00000000);
    resp = sdcard_receive(1);
    if (resp == 0xff) return 255;
  
    timeout++;
  } while ((resp == 0x01) && (timeout < 100));
  if (timeout == 100) return 255;

  return resp;
#+END_SRC

End the function.

#+BEGIN_SRC c
  } // get_mmc_capacity
#+END_SRC

** Initialization Function
This functions initialize the SPI registers and the SD card. The SPI initialization is very straigh forward, but the SD card must follow a state diagram before asking for any block data.

The following diagram present the procedure for initializing all types of SD cards. The image with a detailed explanation can be found at the following URL: http://elm-chan.org/docs/mmc/mmc_e.html#spiinit

[[file:imgs/sdinit-small.png]]

#+BEGIN_SRC c
uint8_t sdcard_init(uint8_t stop_at_step){
#+END_SRC

The ~counts~ is a counter in case that a command has been executed many times. In this case, a timeout is considered and an error returned. The amount of times to consider a timeout is determined according to the situation.

#+BEGIN_SRC c
uint8_t count = 0;
#+END_SRC

*** Pin Modes

First, set the pin modes as in the master SPI configuration. The MISO pin (12 board pin or PB4) will be overriden to input mode. MOSI, SCK and SS (11, 13 and 10 board pins) will be set as output.

#+BEGIN_SRC c
*ddrb |= (1<<PB5) | (1<<PB3) | (1<<PB2);
#+END_SRC

*** SPCR - SPI Control Register
Second, set the SPI Control Register. It has the following format.

|------+-----+------+------+------+------+------+------|
|    7 |   6 |    5 |    4 |    3 |    2 |    1 |    0 |
|------+-----+------+------+------+------+------+------|
| SPIE | SPE | DORD | MSTR | CPOL | CPHA | SPR1 | SPR0 |
|------+-----+------+------+------+------+------+------|

All bits starts as zero and are readable and writable.

- SPIE :: Interruption Enable.
- SPE :: SPI Enable.
- DORD :: 0/LSB or 1/MSB send first.
- MSTR :: 1/Master or slave mode.
- CPOL :: Clock polarity mode. SCK is 0/high or 1/low for marking an idle state.
- CPHA :: Clock phase mode. SCK marks sample or setup function depending on the edge.
- SPR1-0 :: Select the prescaler according to the F_{osc}. Also, see SPI2X bit at the SPSR register.

The CPOL and CPHA has the following modes.

|----------+------+------+-----------------+-----------------|
| SPI Mode | CPOL | CPHA | Leading Edge    | Trailing Edge   |
|----------+------+------+-----------------+-----------------|
|        0 |    0 |    0 | Sample(Rising)  | Setup(Falling)  |
|        1 |    0 |    1 | Setup(Rising)   | Sample(Falling) |
|        2 |    1 |    0 | Sample(Falling) | Setup(Rising)   |
|        3 |    1 |    1 | Setup(Falling)  | Sample(Falling) |
|----------+------+------+-----------------+-----------------|

For the SD card the following is needed:

- No interruptions (SPIE = 0). Polling will be used.
- SPI Enabled (SPE = 1).
- MSB is the first to send (DORD = 0).
- Master mode (MSTR = 1).
- Clock polarity marks a rising when a leading edge appears (CPOL=0).
- Clock phase marks a sample when a leading edge appears (CPHA=0).
- Prescaler must be between 100 and 400Khz

According to Critinel Ababai, the SD card requires a SCK with a frequency between 100 and 400KHz. The F_{osc} in Arduino UNO is 16Mhz = 16000Khz = 16000000Hz. Then,  minimum prescaler is $\frac{16000Khz}{100Khz} = 160$ and the maximum is $\frac{16000KHz}{400KHz} = 40$. The available prescalers are 64 and 128, which the 64 prescaler is the selected one. The SPI2X, SPR1 and SPR0  must be setted to ~0b010~ respectively.

|------+-----+------+------+------+------+------+------|
| SPIE | SPE | DORD | MSTR | CPOL | CPHA | SPR1 | SPR0 |
|------+-----+------+------+------+------+------+------|
|    0 |   1 |    0 |    1 |    0 |    0 |    1 |    0 |
|------+-----+------+------+------+------+------+------|

#+BEGIN_SRC c
spi->spcr = 0b01010010;
#+END_SRC

*** SPSR - SPI Status Register
The SPSR register has the following format.

|------+------+-----+-------|
| 7    | 6    | 5-1 |     0 |
| SPIF | WCOL | -   | SPI2X |
|------+------+-----+-------|
| R    | R    | R   | RW    |
|------+------+-----+-------|

- SPIF :: SPI Interrupt flag. Is set to 1 when a serial transfer is complete. This bit is cleared when the interruption handler is executed or when reading the SPSR and then accessing the SPDR register.
- WCOL :: Write COLisions flag. IS set to 1 when the SPDR is written during a data transfer. Is cleared when reading SPSR and then the SPDR register.
- SPI2X :: Double SPI Speed Bit. For prescaler use.

The prescaler needs the SPI2X bit setted to the corresponding value.

#+BEGIN_SRC c
spi->spsr &= 0b11111110 | (0<<SPI2X);
#+END_SRC

*** SD card in SPI mode
Set MOSI and CS lines to 1. Wait for more than 74 SCK cycles.

#+BEGIN_SRC c
cs_on();
for (int i =0; i < 10; i++){
  send_byte(0xff);
}
#+END_SRC

This is the last command for setting up the SPI mode for the SD card. If ~stop_at_step~ is setted accordingly, then stop here.

#+BEGIN_SRC c
if (stop_at_step == INIT_STOP_SPI) return 1;
#+END_SRC

*** CMD0 First command
CMD0 resets the SD card for setting it in idle state.

Send a SPI mode command CMD0 until receiving a proper R1 response (0x01). Remember that all R1 responses starts with the 7th bit at 0. This means that if this bit is 1 it must read again (or if resp is 0xff which means that the card is busy).

#+BEGIN_SRC c 
uint8_t resp = 0;
count = 0;
while (resp != 0x01 && count < 100){
  sdcard_send_command(0,0);
  resp = sdcard_receive(0);
  uint8_t count2 = 0;
  while ((resp & 0x80) && (count2 < 100)){
    resp = sdcard_receive(0);
    count2++;
  }
  if (count2 == 100) return 255;
  count++;
}
if (count == 100) return 254; 
#+END_SRC

If ~stop_at_step~ is setted with stop at here, exit the function.

#+BEGIN_SRC c
if (stop_at_step == INIT_STOP_CMD0) return 1;
#+END_SRC

*** Try CMD8 for 2.0 cards
CMD8 asks about status condition and if the card can operate at the provided voltage. It is supported for 2.0 cards, but 1.0 ones will answer the R1 response as an illegal command. 

The paramaters bits 11-8 indicates the supplied voltage (VHS). The 7-0 bits of the parameter is a pattern that will be echoed at the R7 response. See section [[*R7][R7]] for description about the bits format.

Fortunatelly, the Arduino's SD card module provide the SD card with the proper voltage. Although, the command has to be sent for changing the SD card state.

#+BEGIN_SRC c
count = 0;
sdcard_send_command(8, 0x1AA);
resp = sdcard_receive(1);
if (resp == 0xff) return 253;
#+END_SRC

Check which version this card is and call the v2 or v1 methods accordingly.

#+BEGIN_SRC c
  if (resp == 0x01) {
#+END_SRC

**** SD version 2
If the pattern given (0x1AA) and the echo back at the response matches, then this is probably an SD card version 2. If an error or on response is provided, then is a version 1. In any case, a ACMD 41 must be sent.

#+BEGIN_SRC c
    resp = sdcard_receive(0);
    resp = sdcard_receive(0);
    uint8_t resp0 = sdcard_receive(0);
    resp = sdcard_receive(0);
    if ((resp0 & 0x0f) == 0x01 && 
        (resp == 0xAA)) {
#+END_SRC

The pattern matches. This is probably a version 2 card. Send an ACMD41 command. This activates the card's initialization process.

#+BEGIN_SRC c
      if (!get_v2_capacity()) return 252;
#+END_SRC

Once the capacity is determined and the card initialized, send a CMD58. This reads the OCR registers for the CCS bit. If this bit is 0, then this is a v.2 card with byte address (SDSC), else this is a v.2 card with block address (SDHC/SDXC).

#+BEGIN_SRC c
      uint8_t cmd58resp[5];
      send_cmd58(cmd58resp);
      if ( (cmd58resp[0] == 0x01) &&
           (cmd58resp[4] & 0b00000010)){
        // CCS bit is 1
        use_address = USE_BYTE_ADDRESS;
      }else{
        use_address = USE_BLOCK_ADDRESS;
      } // if cmd58resp...  
#+END_SRC

However, if the pattern mismatch, return 255 meaning that initialization faled.

#+BEGIN_SRC c
  }else{ // if (resp0 & 0x0f... ) 0x1AA pattern mismatch
    return 251;
  } // if (resp0 & 0x0f...)
#+END_SRC

**** SD version 1
But if the CMD8 failed, it means it is unsupported and thus, the card is not a v. 2 one.

#+BEGIN_SRC c
  }else{ // CMD8 failed (0x01 R1 answer)
#+END_SRC

Get the capacity with the ACMD41.

#+BEGIN_SRC c
    // It is a version 1 card.
    if (!get_v1_capacity()){
      // It is an MMC v.3 card.
      if (!get_mmc_capacity()) return 250;
    }
#+END_SRC

#+BEGIN_SRC c
  } // if (resp == 0x01)... ("if" that checks CMD8 answer)
#+END_SRC


**** Stop if requested
If ~stop_at_step~ is setted with stop at here, exit the function.

#+BEGIN_SRC c
if (stop_at_step == INIT_STOP_CMD8) return 1;
#+END_SRC


*** Send CMD16 command
Try to force 512 bytes of block size. This is useful for working with FAT file systems.

#+BEGIN_SRC c
count = 0;
sdcard_send_command(16, 0x00000200);
resp = sdcard_receive(1);
if (resp == 0xff) return 249;
#+END_SRC

*** End
Now the SPI and the SD card is ready. Any command can be requested.

End the sdcard initialization.

#+BEGIN_SRC c
  return 1;
} // sdcard_init
#+END_SRC

** Return the last command executed
#+BEGIN_SRC c
uint8_t* sdcard_last_cmd(){
  return last_cmd;
}
#+END_SRC

** Return if using block or byte addresses
#+BEGIN_SRC c
uint8_t sdcard_use_address(){
  return use_address;
} // sdcard_use_address
#+END_SRC

* Main file
:PROPERTIES:
:header-args: :comments no :padline yes :tangle read.c
:END:

** License
This work is under the GPL v3 license. 

#+BEGIN_SRC c
/* 
   Copyright 2019 Christian Gimenez
   
   Author: Christian Gimenez   

   read.c
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#+END_SRC

** Include USART
The USART library will be used to report to the user what the SD card answers.

#+BEGIN_SRC c
#include "../libs/usart-lib.h"
#+END_SRC

Include the SD card lib.

#+BEGIN_SRC c
#include "sdcard.h"
#+END_SRC

** Start Main function
#+BEGIN_SRC c
void main(){
#+END_SRC

*** Initialize libraries
#+BEGIN_SRC c
serial_init();
serial_send_string("Serial initialized\n\r");
uint8_t initret = sdcard_init(INIT_STOP_NONE);
 if (initret) {
   serial_send_string("SD card initialized\n\r");
 }else{
   serial_send_string("SD card initialization error:");
   serial_send_hex(initret);
 }
#+END_SRC

*** Get the OCR register 
Retrieve the OCR register to see if the initialization went succesfuly.

#+BEGIN_SRC c
sdcard_send_command(58,0);
serial_send_string("CMD58:");
uint8_t resp[5];
resp[0] = sdcard_receive(1);
serial_send_hex(resp[0]);
resp[1] = sdcard_receive(0);
serial_send_hex(resp[1]);
resp[2] = sdcard_receive(0);
serial_send_hex(resp[2]);
resp[3] = sdcard_receive(0);
serial_send_hex(resp[3]);
resp[4] = sdcard_receive(0);
serial_send_hex(resp[4]);
#+END_SRC

*** Read the card content
Send the CMD17 command to read up to 512 bytes. The 512 is setted at the initialization with CMD 16 command. The parameter 0x00 means to start reading from this address.

#+BEGIN_SRC c
  // Read some blocks
  uint8_t res;
  sdcard_send_command(17, 0x00);
  serial_send_string("\n\rCMD17:");
  res = sdcard_receive(1);
  serial_send_hex(res);
  serial_send_string("\n\r");
  
  if (res == 0x00){
    int i = 0;
    for (i = 0; i < 512; i++){
      res = sdcard_receive(0);
      serial_send_hex(res);
      if (i % 2 == 0) {
        serial_put_char(' ');
      }
      if (i % 16 == 0){
        serial_send_string("\n\r");
      }
    }
  } 
#+END_SRC


*** End Main

#+BEGIN_SRC c
} // main
#+END_SRC



* Meta     :noexport:

  # ----------------------------------------------------------------------
  #+TITLE:  SD Card Test
  #+AUTHOR: Christian Gimenez
  #+DATE:   29 jun 2019
  #+EMAIL:
  #+DESCRIPTION: 
  #+KEYWORDS: 

  #+STARTUP: inlineimages hidestars content hideblocks entitiespretty indent fninline latexpreview
  #+TODO: TODO(t!) CURRENT(c!) PAUSED(p!) | DONE(d!) CANCELED(C!@)
  #+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:{} -:t f:t *:t <:t
  #+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc tex:imagemagick
  #+LINK_UP:   
  #+LINK_HOME: 
  #+XSLT:

  # -- HTML Export
  #+INFOJS_OPT: view:info toc:t ftoc:t ltoc:t mouse:underline buttons:t path:libs/org-info.js
  #+EXPORT_SELECT_TAGS: export
  #+EXPORT_EXCLUDE_TAGS: noexport
  #+HTML_LINK_UP: ../../index.html
  #+HTML_LINK_HOME: ../../index.html

  # -- For ox-twbs or HTML Export
  #+HTML_HEAD: <link href="../../libs/bootstrap.min.css" rel="stylesheet">
  #+HTML_HEAD: <script src="../../libs/jquery.min.js"></script> 
  #+HTML_HEAD: <script src="../../libs/bootstrap.min.js"></script>
  #+LANGUAGE: en

  # Local Variables:
  # org-hide-emphasis-markers: t
  # org-use-sub-superscripts: "{}"
  # fill-column: 80
  # visual-line-fringe-indicators: t
  # ispell-local-dictionary: "british"
  # End:
