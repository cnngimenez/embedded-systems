
* Header 
  :PROPERTIES:
  :header-args: :comments no :padline yes :tangle usart-lib.h
  :END:

** License
#+BEGIN_SRC c
/* 
   Copyright 2019 Christian Gimenez
   
   Author: Christian Gimenez   

   usar-lib.h
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#+END_SRC

** Start header
Don't include the header more than once.

#+BEGIN_SRC c
#ifndef _USART_LIB_H
#define _USART_LIB_H 1
#+END_SRC

Include integer subtypes definitions (like ~uint8_t~).

#+BEGIN_SRC c
#include <stdint.h>
#+END_SRC

Include the math library for the ~round()~ function.

#+BEGIN_SRC c
#include <math.h>
#+END_SRC

** Configuration constants
These constants must be setted accordingly before using the library.

*** Frequency

#+BEGIN_SRC c
#define OSC_FREQUENCY 16000000UL // 16MHz
#define BAUD_RATE 9600 // bps
#+END_SRC

Calculate the UBRR register value. The 16.0 must be specified to make a coercion to float type. If ~round()~ is not use, the value will be truncated when using an implicit cast to the unsigned long type, resulting in a wrong results.

For example: 16000000/16/115200 - 1 = 7.68. When rounding up, the result will be 8, but when truncating it is 7. However, round(16000000/16/115200) - 1 = round(8.68) - 1 = 9 - 1 = 8.

When having problems, set the BRR_VALUE directly with the constant without any equation and comment the ~#include <math.h>~ line.

#+BEGIN_SRC c
// Apply the UBRR formulae according to the Atmega 328 datasheet.
#define BRR_VALUE (unsigned long) round(OSC_FREQUENCY/16.0/BAUD_RATE) - 1
#+END_SRC

*** Reception and Transmission
Enable transmission and reception. 

#+BEGIN_SRC c
#define USART_RX_ENABLE 1
#define USART_TX_ENABLE 1
#+END_SRC

*** Interruptions
Disable interruptions for receiving, transmiting and UDR (non empty data received). Keep the definitions in case the developer want to use them.

#+BEGIN_SRC c
// #define USART_RX_INT_ENABLE 1
// #define USART_TX_INT_ENABLE 1
// #define USART_UDR_INT_ENABLE 1
#+END_SRC

*** Mode
Enable 8 bit character size

#+BEGIN_SRC c
// #define USART_CHARACTER_SIZE_5 1
// #define USART_CHARACTER_SIZE_6 1
// #define USART_CHARACTER_SIZE_7 1
#define USART_CHARACTER_SIZE_8 1
// #define USART_CHARACTER_SIZE_9 1
#+END_SRC

Enable Async USART.

#+BEGIN_SRC c
#define USART_ASYNC_MODE 1
// #define USART_SYNC_MODE 1
// #define USART_MASTER_SPI_MODE 1
#+END_SRC

Disable parity check. Declare the other parity just in case the developers want to use them.

#+BEGIN_SRC c
#define USART_PARITY_CHECK_DISABLE 1
// #define USART_PARITY_CHECK_ODD 1
// #define USART_PARITY_CHECK_EVEN 1
#+END_SRC

Set one stop bit. Define the 2 stop bits in case the developers want to use them.

#+BEGIN_SRC c
#define USART_STOP_BIT_ONE 1
// #define USART_STOP_BIT_TWO 1
#+END_SRC

Set the clock polarity for using the rising edge when transmitting and falling edge when recieving.

#+BEGIN_SRC c
#define USART_POLARITY_TX_RISING 1
// #define USART_POLARITY_TX_FALLING 1
#+END_SRC

*** USART 1
Include USART 1 configuration if USART 1 is enable.

#+BEGIN_SRC c
  /*
   Uncomment this for enabling USART 1 registers and methods.
   Its mode is configure at the usart_1_config.h file.
  ,*/
  // #define USART_1

  #ifdef USART_1
  #include "usart_1_config.h"
  #endif
#+END_SRC

*** USART 2
Include USART 2 configuration if USART 2 is enable.

#+BEGIN_SRC c
  /*
   Uncomment this for enabling USART 2 registers and methods.
   Its mode is configure at the usart_2_config.h file.
  ,*/
  // #define USART_2

  #ifdef USART_2
  #include "usart_2_config.h"
  #endif
#+END_SRC

*** USART 3
Include USART 3 configuration if USART 3 is enable.

#+BEGIN_SRC c
  /*
   Uncomment this for enabling USART 3 registers and methods.
   Its mode is configure at the usart_3_config.h file.
  ,*/
  // #define USART_3

  #ifdef USART_3
  #include "usart_3_config.h"
  #endif
#+END_SRC

** Define methods
Initialize the serial registers. If ~USART_n~ constants are enabled, the other USARTn registers are initialized too.

#+BEGIN_SRC c
void serial_init();
#+END_SRC

*** Receive data
Receive a character from the UART.

#+BEGIN_SRC c
char serial_get_char();
#+END_SRC

Receive a string up to a "\n" character.

#+BEGIN_SRC c
char* serial_get_line();
#+END_SRC

Receive a string up to a "\0" character.

#+BEGIN_SRC c
char* serial_get_string();
#+END_SRC

Receive an integer (send a string up to a "\0" or "\n").

#+BEGIN_SRC c
int serial_get_integer();
#+END_SRC

*** Send data
Send a character.

#+BEGIN_SRC c
void serial_put_char(char c);
#+END_SRC

Send a string up to the "\0" character.

#+BEGIN_SRC c
void serial_send_string(char *s);
#+END_SRC

Send an Hexadecimal number.

#+BEGIN_SRC c
void serial_send_hex(uint8_t number);
#+END_SRC


Send an integer number. This converts the number into a string and sends it.

#+BEGIN_SRC c
void serial_send_integer(int number);
#+END_SRC


*** USARTn macros
These macros helps in the definition of the same functions applied to other USARTn registers.

**** Receive data

#+BEGIN_SRC c
#define GET_CHAR_FNC(N) char serial ##N## _get_char();
#define GET_LINE_FNC(N) char* serial  ##N## _get_line();
#define GET_STRING_FNC(N) char* serial ##N## _get_string();
#define GET_INTEGER_FNC(N) int serial ##N## _get_integer();
#+END_SRC

**** Send data

#+BEGIN_SRC c
#define PUT_CHAR_FNC(N) void serial ##N## _put_char(char c);
#define SEND_STRING_FNC(N) void serial ##N## _send_string(char *s);
#define SEND_INTEGER_FNC(N) void serial ##N## _send_integer(int number);
#+END_SRC


*** USART 1
When ~USART_1~ macro is defined, enable the same functions with ~serial1~ prefix.

#+BEGIN_SRC c
#ifdef USART_1
#+END_SRC

**** Receive data

#+BEGIN_SRC c
GET_CHAR_FNC(1)
GET_LINE_FNC(1)
GET_STRING_FNC(1)
GET_INTEGER_FNC(1)
#+END_SRC

**** Send data

#+BEGIN_SRC c
PUT_CHAR_FNC(1)
SEND_STRING_FNC(1)
SEND_INTEGER_FNC(1)
#+END_SRC

**** End USART 1

#+BEGIN_SRC c
#endif 
#+END_SRC

*** USART 2
When ~USART_2~ macro is defined, enable the same functions with ~serial2~ prefix.

#+BEGIN_SRC c
#ifdef USART_2
#+END_SRC

**** Receive data

#+BEGIN_SRC c
GET_CHAR_FNC(2)
GET_LINE_FNC(2)
GET_STRING_FNC(2)
GET_INTEGER_FNC(2)
#+END_SRC

**** Send data

#+BEGIN_SRC c
PUT_CHAR_FNC(2)
SEND_STRING_FNC(2)
SEND_INTEGER_FNC(2)
#+END_SRC

**** End USART 2

#+BEGIN_SRC c
#endif 
#+END_SRC

*** USART 3
When ~USART_3~ macro is defined, enable the same functions with ~serial3~ prefix.

#+BEGIN_SRC c
#ifdef USART_3
#+END_SRC

**** Receive data

#+BEGIN_SRC c
GET_CHAR_FNC(3)
GET_LINE_FNC(3)
GET_STRING_FNC(3)
GET_INTEGER_FNC(3)
#+END_SRC

**** Send data

#+BEGIN_SRC c
PUT_CHAR_FNC(3)
SEND_STRING_FNC(3)
SEND_INTEGER_FNC(3)
#+END_SRC

**** End USART 3

#+BEGIN_SRC c
#endif 
#+END_SRC

** End header

#+BEGIN_SRC c
#endif // _USART_LIB_H
#+END_SRC

** USART 1 configuration
:PROPERTIES:
:header-args: :comments no :padline yes :tangle usart_1_config.h
:END:

The USART 1 has the same configuration as the USART 0.

*** Frequency

#+BEGIN_SRC c
#define USART1_OSC_FREQUENCY 16000000UL // 16MHz
#define USART1_BAUD_RATE 9600 // bps
#+END_SRC

#+BEGIN_SRC c
// Apply the UBRR formulae according to the Atmega 328 datasheet.
#define USART1_BRR_VALUE (unsigned long) round(USART1_OSC_FREQUENCY/16.0/USART1_BAUD_RATE) - 1
#+END_SRC

*** Reception and Transmission
Enable transmission and reception. 

#+BEGIN_SRC c
#define USART1_RX_ENABLE 1
#define USART1_TX_ENABLE 1
#+END_SRC

*** Interruptions
Disable interruptions for receiving, transmiting and UDR (non empty data received). Keep the definitions in case the developer want to use them.

#+BEGIN_SRC c
// #define USART1_RX_INT_ENABLE_1 1
// #define USART1_TX_INT_ENABLE_1 1
// #define USART1_UDR_INT_ENABLE_1 1
#+END_SRC

*** Mode
Enable 8 bit character size

#+BEGIN_SRC c
// #define USART1_CHARACTER_SIZE_5 1
// #define USART1_CHARACTER_SIZE_6 1
// #define USART1_CHARACTER_SIZE_7 1
#define USART1_CHARACTER_SIZE_8 1
// #define USART1_CHARACTER_SIZE_9 1
#+END_SRC

Enable Async USART.

#+BEGIN_SRC c
#define USART1_ASYNC_MODE 1
// #define USART1_SYNC_MODE 1
// #define USART1_MASTER_SPI_MODE 1
#+END_SRC

Disable parity check. Declare the other parity just in case the developers want to use them.

#+BEGIN_SRC c
#define USART1_PARITY_CHECK_DISABLE 1
// #define USART1_PARITY_CHECK_ODD 1
// #define USART1_PARITY_CHECK_EVEN 1
#+END_SRC

Set one stop bit. Define the 2 stop bits in case the developers want to use them.

#+BEGIN_SRC c
#define USART1_STOP_BIT_ONE 1
// #define USART1_STOP_BIT_TWO 1
#+END_SRC

Set the clock polarity for using the rising edge when transmitting and falling edge when recieving.

#+BEGIN_SRC c
#define USART1_POLARITY_TX_RISING 1
// #define USART1_POLARITY_TX_FALLING 1
#+END_SRC

** USART 2 configuration
:PROPERTIES:
:header-args: :comments no :padline yes :tangle usart_2_config.h
:END:

The USART 2 has the same configuration as the USART 0.

*** Frequency

#+BEGIN_SRC c
#define USART2_OSC_FREQUENCY 16000000UL // 16MHz
#define USART2_BAUD_RATE_2 9600 // bps
#+END_SRC

#+BEGIN_SRC c
// Apply the UBRR formulae according to the Atmega 328 datasheet.
#define USART2_BRR_VALUE (unsigned long) round(USART2_OSC_FREQUENCY/16.0/USART2_BAUD_RATE) - 1
#+END_SRC

*** Reception and Transmission
Enable transmission and reception. 

#+BEGIN_SRC c
#define USART2_RX_ENABLE 1
#define USART2_TX_ENABLE 1
#+END_SRC

*** Interruptions
Disable interruptions for receiving, transmiting and UDR (non empty data received). Keep the definitions in case the developer want to use them.

#+BEGIN_SRC c
// #define USART2_RX_INT_ENABLE 1
// #define USART2_TX_INT_ENABLE 1
// #define USART2_UDR_INT_ENABLE 1
#+END_SRC

*** Mode
Enable 8 bit character size

#+BEGIN_SRC c
// #define USART2_CHARACTER_SIZE_5 1
// #define USART2_CHARACTER_SIZE_6 1
// #define USART2_CHARACTER_SIZE_7 1
#define USART2_CHARACTER_SIZE_8 1
// #define USART2_CHARACTER_SIZE_9 1
#+END_SRC

Enable Async USART.

#+BEGIN_SRC c
#define USART2_ASYNC_MODE 1
// #define USART2_SYNC_MODE 1
// #define USART2_MASTER_SPI_MODE 1
#+END_SRC

Disable parity check. Declare the other parity just in case the developers want to use them.

#+BEGIN_SRC c
#define USART2_PARITY_CHECK_DISABLE 1
// #define USART2_PARITY_CHECK_ODD 1
// #define USART2_PARITY_CHECK_EVEN 1
#+END_SRC

Set one stop bit. Define the 2 stop bits in case the developers want to use them.

#+BEGIN_SRC c
#define USART2_STOP_BIT_ONE 1
// #define USART2_STOP_BIT_TWO 1
#+END_SRC

Set the clock polarity for using the rising edge when transmitting and falling edge when recieving.

#+BEGIN_SRC c
#define USART2_POLARITY_TX_RISING 1
// #define USART2_POLARITY_TX_FALLING 1
#+END_SRC

** USART 3 configuration
:PROPERTIES:
:header-args: :comments no :padline yes :tangle usart_3_config.h
:END:

The USART 3 has the same configuration as the USART 0.

*** Frequency

#+BEGIN_SRC c
#define USART3_OSC_FREQUENCY 16000000UL // 16MHz
#define USART3_BAUD_RATE 9600 // bps
#+END_SRC

#+BEGIN_SRC c
// Apply the UBRR formulae according to the Atmega 328 datasheet.
#define USART3_BRR_VALUE (unsigned long) round(USART3_OSC_FREQUENCY/16.0/USART3_BAUD_RATE) - 1
#+END_SRC

*** Reception and Transmission
Enable transmission and reception. 

#+BEGIN_SRC c
#define USART3_RX_ENABLE 1
#define USART3_TX_ENABLE 1
#+END_SRC

*** Interruptions
Disable interruptions for receiving, transmiting and UDR (non empty data received). Keep the definitions in case the developer want to use them.

#+BEGIN_SRC c
// #define USART3_RX_INT_ENABLE 1
// #define USART3_TX_INT_ENABLE 1
// #define USART3_UDR_INT_ENABLE 1
#+END_SRC

*** Mode
Enable 8 bit character size

#+BEGIN_SRC c
// #define USART3_CHARACTER_SIZE_5 1
// #define USART3_CHARACTER_SIZE_6 1
// #define USART3_CHARACTER_SIZE_7 1
#define USART3_CHARACTER_SIZE_8 1
// #define USART3_CHARACTER_SIZE_9 1
#+END_SRC

Enable Async USART.

#+BEGIN_SRC c
#define USART3_ASYNC_MODE 1
// #define USART3_SYNC_MODE 1
// #define USART3_MASTER_SPI_MODE 1
#+END_SRC

Disable parity check. Declare the other parity just in case the developers want to use them.

#+BEGIN_SRC c
#define USART3_PARITY_CHECK_DISABLE 1
// #define USART3_PARITY_CHECK_ODD 1
// #define USART3_PARITY_CHECK_EVEN 1
#+END_SRC

Set one stop bit. Define the 2 stop bits in case the developers want to use them.

#+BEGIN_SRC c
#define USART3_STOP_BIT_ONE 1
// #define USART3_STOP_BIT_TWO 1
#+END_SRC

Set the clock polarity for using the rising edge when transmitting and falling edge when recieving.

#+BEGIN_SRC c
#define USART3_POLARITY_TX_RISING 1
// #define USART3_POLARITY_TX_FALLING 1
#+END_SRC


* Body
  :PROPERTIES:
  :header-args: :comments no :padline yes :tangle usart-lib.c
  :END:

** License

#+BEGIN_SRC c
/* 
   Copyright 2019 Christian Gimenez
   
   Author: Christian Gimenez   

   usart-lib.c
   
   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.
   
   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#+END_SRC

** Include headers
Include the declarations.

#+BEGIN_SRC c
#include "usart-lib.h"
#+END_SRC

Inlude AVR I/O register and bit names (like ~RXEN0~).

#+BEGIN_SRC c
#include <avr/io.h>
#+END_SRC

** Structure
This sections explains a structure that maps directly to the memory register. It is used to set the USART configuration.

These are the affected registers for ATmega 328p.

|---------+--------+--------------------------|
| Address | Name   | Description              |
|---------+--------+--------------------------|
|    0xc6 | UDR0   | USART Data Register.     |
|    0xc5 | UBRR0H | Configure the Baud Rate. |
|    0xc4 | UBRR0L |                          |
|    0xc3 | -      | Reserved                 |
|    0xc2 | UCSR0C | Configure the mode.      |
|    0xc1 | UCSR0B |                          |
|    0xc0 | UCSR0A |                          |
|---------+--------+--------------------------|

The structure is as follows. Read their fields in the inverse order of the register (i.e. UCSR0A is the ~status_control_a~ field).

#+BEGIN_SRC c
     typedef struct {
       uint8_t status_control_a;
       uint8_t status_control_b;
       uint8_t status_control_c;
       uint8_t reserved1;
       uint8_t baud_rate_l;
       uint8_t baud_rate_h;
       uint8_t data;
     } volatile uart_t;
#+END_SRC

Map the structure starting from the 0xc0 address to match the ATmega 328p.
   
#+BEGIN_SRC c
     volatile uart_t *serial = (uart_t*) (0xc0);
#+END_SRC

The following structure match the ATmega 2549. This processor has four USART.

|----------------+--------------+--------------|
| Starting Addr. | Ending Addr. | USART Number |
|----------------+--------------+--------------|
|           0xc0 |         0xc6 | USART 0      |
|           0xc8 |         0xce | USART 1      |
|           0xd0 |         0xd6 | USART 2      |
|          0x130 |        0x136 | USART 3      |
|----------------+--------------+--------------|

#+BEGIN_SRC c
  #ifdef USART_1
  volatile uart_t *serial_1 = (uart_t*) (0xc8);
  #endif
  #ifdef USART_2
  volatile uart_t *serial_2 = (uart_t*) (0xd0);
  #endif
  #ifdef USART_3
  volatile uart_t *serial_3 = (uart_t*) (0x130);
  #endif
#+END_SRC


** Implement methods

*** init
#+BEGIN_SRC c
void serial_init(){
#+END_SRC

**** UBRR
Set the baud rate high value. 

#+BEGIN_SRC c
serial->baud_rate_h = (unsigned char) (BRR_VALUE>>8);
serial->baud_rate_l = (unsigned char) BRR_VALUE;
#+END_SRC

**** UCSR A
There are three USART Control and Status Register (UCSR). The UCSRnA is the first one that has the following bits:

|---------+------+------+-------+-----+------+------+------+-------|
| Name:   | RXCn | TXCn | UDREn | FEn | DORn | UPEn | U2Xn | MPCMn |
|---------+------+------+-------+-----+------+------+------+-------|
| /       | <    |      |       |     |      |      |      | >     |
| R/W:    | R    | RW   | R     | R   | R    | R    | RW   | RW    |
|---------+------+------+-------+-----+------+------+------+-------|
| I. V. : | 0    | 0    | 1     | 0   | 0    | 0    | 0    | 0     |
|---------+------+------+-------+-----+------+------+------+-------|
(I.V.: Initial Value)

- RXCn :: Receive Complete.
- TXCn :: Transmit Complete.
- UDREn :: Data Register Empty.
- FEn :: Frame Error
- DORn :: Data OverRun
- UPEn :: USART Parity Error
- U2Xn :: Double the USART transmition speed.
- MPCMn :: MultiProcessor Communication Mode.

Most of this bits are readonly. There is no need to set them because the initial values are right.

Latter, the RXCn and the TXCn must be used for check if a character has been received or for start transmitting.


**** UCSR B
This register control the interruptions, the transmission and reception of data and one of the bits that controls the size of each character.

By default, this library has macros setted for the following values. 

|--------+--------+--------+-------+-------+--------+-------+-------|
| RCXIEn | TCXIEn | UDRIEn | RXENn | TXENn | UCSZn2 | RXB8n | TXB8n |
|--------+--------+--------+-------+-------+--------+-------+-------|
| RW     | RW     | RW     | RW    | RW    | RW     | R     | RW    |
|--------+--------+--------+-------+-------+--------+-------+-------|
| 0      | 0      | 0      | 1     | 1     | 0      | 0     | 0     |
|--------+--------+--------+-------+-------+--------+-------+-------|

In the following code, it will set the value according to the macros defined at the header. 
Also, for readability, the syntax used for setting the bits is the following: ~register |= (1<<BITNUMBER)~. To achieve better performance, the compiler translate this into the proper number depending on the bit number. For instance: ~(1<<RXEN0)~ where ~RXEN0~ is equal to 4 is compiled into the assembler instruction ~ori r18, lo8(16)~ (16 = 0b10000) instead of 4 shift lefts instructions.

First, clear the register.

#+BEGIN_SRC c
  serial->status_control_b = 0;
#+END_SRC

Set the interruptions enable according to the macros.

#+BEGIN_SRC c
  #ifdef USART_RX_INT_ENABLE
  serial->status_control_b |= (1<<RCXIE0);
  #endif
  #ifdef USART_TX_INT_ENABLE
  serial->status_control_b |= (1<<TCXIEN0);
  #endif
  #ifdef USART_UDR_INT_ENABLE
  serial->status_control_b |= (1<<UDRIE0);
  #endif
#+END_SRC

Set the receiving and transmitting enable.

#+BEGIN_SRC c
  #ifdef USART_RX_ENABLE
  serial->status_control_b |= (1<<RXEN0);
  #endif
  #ifdef USART_TX_ENABLE
  serial->status_control_b |= (1<<TXEN0);
  #endif
  /*
  // (0<<RCXIE0) | (0<<TCXIE0) | (0<<UDRIE) |
  | (1<<RXEN0) | (1<<TXEN0);
  // (0<<UCSZ02) | (0<<RXB80) | (0<<TXB80);
  ,*/
#+END_SRC

Finally, if the macro ~USART_CHARACTER_SIZE_9~ is setted, change the UCSZ02 bit.

#+BEGIN_SRC c
  #ifdef USART_CHARACTER_SIZE_9
  serial->status_control_b |= (1<<UCSZ02);
  #endif
#+END_SRC


**** UCSR C
Set the control and status register C. 

- Set Async USART mode at the  Mode Select (UMSELn1 and UMSELn0) bits, value is 00.
- Disable the Parity Mode (UPMn1 and UPMn0 bits, value is 00).
- Select 1 stop bit (USBSn bit, value is 0).
- Set 8 character size (UCSZn1 and UCSZn0 bits, the UCSZn2 bit is at UCSRB register, value is 011).
- Clock polarity at rising on transmitting and falling on receiving (UCPOLn, value is 0)

The register will be setted as shown in the following.

|---------+---------+-------+-------+-------+--------+--------+--------|
| UMSELn1 | UMSELn0 | UPMn1 | UPMn0 | USBSn | UCSZn1 | UCSZn0 | UCPOLn |
|---------+---------+-------+-------+-------+--------+--------+--------|
|       0 |       0 |     0 |     0 |     0 |      1 |      1 |      0 |
|---------+---------+-------+-------+-------+--------+--------+--------|

#+BEGIN_SRC c
  serial->status_control_c = 0;

  #ifdef USART_SYNC_MODE
  serial->status_control_c |= (1<<UMLSEL0);
  #endif
  #ifdef USART_MASTER_SPI_MODE
  serial->status_control_c |= (1<<UMLSEL1) | (1<<UMLSEL0);
  #endif

  #ifdef USART_PARITY_CHECK_ODD
  serial->status_control_c |= (1<<UPM1) | (1<<UPM0) ;
  #endif
  #ifdef USART_PARITY_CHECK_EVEN
  serial->status_control_c |= (1<<UPM1);
  #endif

  #ifdef USART_STOP_BIT_TWO
  serial->status_control_c |= (1<<USBS0);
  #endif

  #ifdef USART_CHARACTER_SIZE_8
  serial->status_control_c |= (1<<UCSZ01) | (1<<UCSZ00);
  #endif
  #ifdef USART_CHARACTER_SIZE_7
  serial->status_control_c |= (1<<UCSZ01);
  #endif
  #ifdef USART_CHARACTER_SIZE_6
  serial->status_control_c |= (1<<UCSZ00);
  #endif

  #ifdef USART_POLARITY_TX_FALLING
  serial->status_control_c |= (1<<UCPOL0);
  #endif


  /*
  | (1<<UCSZ01) | (1<<UCSZ00);
  ,*/
#+END_SRC


**** USART 1
Apply the configuration for this USARTn structure.

#+BEGIN_SRC c
#ifdef USART1
#+END_SRC


***** UBBR

#+BEGIN_SRC c
serial1->baud_rate_h = (unsigned char) (USART1_BRR_VALUE>>8);
serial1->baud_rate_l = (unsigned char) USART1_BRR_VALUE;
#+END_SRC

***** UCSR A
Most of this bits are readonly. There is no need to set them because the initial values are right.

***** UCSR B
First, clear the register.

#+BEGIN_SRC c
  serial1->status_control_b = 0;
#+END_SRC

Set the interruptions enable according to the macros.

#+BEGIN_SRC c
  #ifdef USART1_RX_INT_ENABLE
  serial1->status_control_b |= (1<<USART1_RCXIE0);
  #endif
  #ifdef USART1_TX_INT_ENABLE
  serial1->status_control_b |= (1<<USART1_TCXIEN0);
  #endif
  #ifdef USART1_UDR_INT_ENABLE
  serial1->status_control_b |= (1<<USART1_UDRIE0);
  #endif
#+END_SRC

Set the receiving and transmitting enable.

#+BEGIN_SRC c
  #ifdef USART1_RX_ENABLE
  serial1->status_control_b |= (1<<USART1_RXEN0);
  #endif
  #ifdef USART1_TX_ENABLE
  serial1->status_control_b |= (1<<USART1_TXEN0);
  #endif
#+END_SRC

Finally, if the macro ~USART1_CHARACTER_SIZE_9~ is setted, change the UCSZ02 bit.

#+BEGIN_SRC c
  #ifdef USART1_CHARACTER_SIZE_9
  serial1->status_control_b |= (1<<USART1_UCSZ02);
  #endif
#+END_SRC

***** UCSR C

#+BEGIN_SRC c
  serial1->status_control_c = 0;

  #ifdef USART1_SYNC_MODE
  serial1->status_control_c |= (1<<USART1_UMLSEL0);
  #endif
  #ifdef USART1_MASTER_SPI_MODE
  serial1->status_control_c |= (1<<USART1_UMLSEL1) | (1<<USART1_UMLSEL0);
  #endif

  #ifdef USART1_PARITY_CHECK_ODD
  serial1->status_control_c |= (1<<USART1_UPM1) | (1<<USART1_UPM0) ;
  #endif
  #ifdef USART1_PARITY_CHECK_EVEN
  serial1->status_control_c |= (1<<USART1_UPM1);
  #endif

  #ifdef USART1_STOP_BIT_TWO
  serial1->status_control_c |= (1<<USART1_USBS0);
  #endif

  #ifdef USART1_CHARACTER_SIZE_8
  serial1->status_control_c |= (1<<USART1_UCSZ01) | (1<<USART1_UCSZ00);
  #endif
  #ifdef USART1_CHARACTER_SIZE_7
  serial1->status_control_c |= (1<<USART1_UCSZ01);
  #endif
  #ifdef USART1_CHARACTER_SIZE_6
  serial1->status_control_c |= (1<<USART1_UCSZ00);
  #endif

  #ifdef USART1_POLARITY_TX_FALLING
  serial1->status_control_c |= (1<<USART1_UCPOL0);
  #endif
#+END_SRC

***** End USART 1 Configuration

#+BEGIN_SRC c
#endif // USART_1
#+END_SRC

**** USART 2
Apply the configuration for this USARTn structure.

#+BEGIN_SRC c
#ifdef USART_2
#+END_SRC

***** UBBR

#+BEGIN_SRC c
serial2->baud_rate_h = (unsigned char) (USART2_BRR_VALUE>>8);
serial2->baud_rate_l = (unsigned char) USART2_BRR_VALUE;
#+END_SRC

***** UCSR A
Most of this bits are readonly. There is no need to set them because the initial values are right.

***** UCSR B
First, clear the register.

#+BEGIN_SRC c
  serial2->status_control_b = 0;
#+END_SRC

Set the interruptions enable according to the macros.

#+BEGIN_SRC c
  #ifdef USART2_RX_INT_ENABLE
  serial2->status_control_b |= (1<<USART2_RCXIE0);
  #endif
  #ifdef USART2_TX_INT_ENABLE
  serial2->status_control_b |= (1<<USART2_TCXIEN0);
  #endif
  #ifdef USART2_UDR_INT_ENABLE
  serial2->status_control_b |= (1<<USART2_UDRIE0);
  #endif
#+END_SRC

Set the receiving and transmitting enable.

#+BEGIN_SRC c
  #ifdef USART2_RX_ENABLE
  serial2->status_control_b |= (1<<USART2_RXEN0);
  #endif
  #ifdef USART2_TX_ENABLE
  serial2->status_control_b |= (1<<USART2_TXEN0);
  #endif
#+END_SRC

Finally, if the macro ~USART2_CHARACTER_SIZE_9~ is setted, change the UCSZ02 bit.

#+BEGIN_SRC c
  #ifdef USART2_CHARACTER_SIZE_9
  serial2->status_control_b |= (1<<USART2_UCSZ02);
  #endif
#+END_SRC

***** UCSR C

#+BEGIN_SRC c
  serial2->status_control_c = 0;

  #ifdef USART2_SYNC_MODE
  serial2->status_control_c |= (1<<USART2_UMLSEL0);
  #endif
  #ifdef USART2_MASTER_SPI_MODE
  serial2->status_control_c |= (1<<USART2_UMLSEL1) | (1<<USART2_UMLSEL0);
  #endif

  #ifdef USART2_PARITY_CHECK_ODD
  serial2->status_control_c |= (1<<USART2_UPM1) | (1<<USART2_UPM0) ;
  #endif
  #ifdef USART2_PARITY_CHECK_EVEN
  serial2->status_control_c |= (1<<USART2_UPM1);
  #endif

  #ifdef USART2_STOP_BIT_TWO
  serial2->status_control_c |= (1<<USART2_USBS0);
  #endif

  #ifdef USART2_CHARACTER_SIZE_8
  serial2->status_control_c |= (1<<USART2_UCSZ01) | (1<<USART2_UCSZ00);
  #endif
  #ifdef USART2_CHARACTER_SIZE_7
  serial2->status_control_c |= (1<<USART2_UCSZ01);
  #endif
  #ifdef USART2_CHARACTER_SIZE_6
  serial2->status_control_c |= (1<<USART2_UCSZ00);
  #endif

  #ifdef USART2_POLARITY_TX_FALLING
  serial2->status_control_c |= (1<<USART2_UCPOL0);
  #endif
#+END_SRC

***** End USART 2 Configuration
#+BEGIN_SRC c
#endif // USART_2
#+END_SRC

**** USART 3
Apply the configuration for this USARTn structure.

#+BEGIN_SRC c
#ifdef USART_3
#+END_SRC

***** UBBR

#+BEGIN_SRC c
serial3->baud_rate_h = (unsigned char) (USART3_BRR_VALUE>>8);
serial3->baud_rate_l = (unsigned char) USART3_BRR_VALUE;
#+END_SRC

***** UCSR A
Most of this bits are readonly. There is no need to set them because the initial values are right.

***** UCSR B
First, clear the register.

#+BEGIN_SRC c
  serial3->status_control_b = 0;
#+END_SRC

Set the interruptions enable according to the macros.

#+BEGIN_SRC c
  #ifdef USART3_RX_INT_ENABLE
  serial3->status_control_b |= (1<<USART3_RCXIE0);
  #endif
  #ifdef USART3_TX_INT_ENABLE
  serial3->status_control_b |= (1<<USART3_TCXIEN0);
  #endif
  #ifdef USART3_UDR_INT_ENABLE
  serial3->status_control_b |= (1<<USART3_UDRIE0);
  #endif
#+END_SRC

Set the receiving and transmitting enable.

#+BEGIN_SRC c
  #ifdef USART3_RX_ENABLE
  serial3->status_control_b |= (1<<USART3_RXEN0);
  #endif
  #ifdef USART3_TX_ENABLE
  serial3->status_control_b |= (1<<USART3_TXEN0);
  #endif
#+END_SRC

Finally, if the macro ~USART3_CHARACTER_SIZE_9~ is setted, change the UCSZ02 bit.

#+BEGIN_SRC c
  #ifdef USART3_CHARACTER_SIZE_9
  serial3->status_control_b |= (1<<USART3_UCSZ02);
  #endif
#+END_SRC

***** UCSR C

#+BEGIN_SRC c
  serial3->status_control_c = 0;

  #ifdef USART3_SYNC_MODE
  serial3->status_control_c |= (1<<USART3_UMLSEL0);
  #endif
  #ifdef USART3_MASTER_SPI_MODE
  serial3->status_control_c |= (1<<USART3_UMLSEL1) | (1<<USART3_UMLSEL0);
  #endif

  #ifdef USART3_PARITY_CHECK_ODD
  serial3->status_control_c |= (1<<USART3_UPM1) | (1<<USART3_UPM0) ;
  #endif
  #ifdef USART3_PARITY_CHECK_EVEN
  serial3->status_control_c |= (1<<USART3_UPM1);
  #endif

  #ifdef USART3_STOP_BIT_TWO
  serial3->status_control_c |= (1<<USART3_USBS0);
  #endif

  #ifdef USART3_CHARACTER_SIZE_8
  serial3->status_control_c |= (1<<USART3_UCSZ01) | (1<<USART3_UCSZ00);
  #endif
  #ifdef USART3_CHARACTER_SIZE_7
  serial3->status_control_c |= (1<<USART3_UCSZ01);
  #endif
  #ifdef USART3_CHARACTER_SIZE_6
  serial3->status_control_c |= (1<<USART3_UCSZ00);
  #endif

  #ifdef USART3_POLARITY_TX_FALLING
  serial3->status_control_c |= (1<<USART3_UCPOL0);
  #endif
#+END_SRC

***** End USART 3 Configuration
#+BEGIN_SRC c
#endif // USART_3
#+END_SRC

**** End init

#+BEGIN_SRC c
}
#+END_SRC


*** Get Char Internal Method
Receive a character using the provided serial pointer. This can be used by USART0, USART1 or the others.

#+BEGIN_SRC c
char _serial_get_char(uart_t *p_serial){
#+END_SRC

Wait until the value received is ready.

#+BEGIN_SRC c
while (! (p_serial->status_control_a & (1<<RXC0)));
#+END_SRC

Get the character and return it.

#+BEGIN_SRC c
char c = p_serial->data;
return c;
#+END_SRC

#+BEGIN_SRC c
} // _serial_get_char
#+END_SRC

*** Put Char Internal Method
Send a character using the provided serial pointer. This can be used by all USARTn configurations.

#+BEGIN_SRC c
void _serial_put_char(uart_t *p_serial, char c){
#+END_SRC

The data register must be empty, wait for it.

#+BEGIN_SRC c
while (! (p_serial->status_control_a & (1<<UDRE0)));
#+END_SRC

Tell the UART to send the character! Store it at the UDR0.

#+BEGIN_SRC c
p_serial->data = c;
#+END_SRC

Return.

#+BEGIN_SRC c
}
#+END_SRC

*** Put Char

#+BEGIN_SRC c
void serial_put_char(char c){
  _serial_put_char(serial, c);
}
#+END_SRC

*** Get Char
Call the internal function with the ~serial~ pointer.
#+BEGIN_SRC c
  char serial_get_char(){
    return _serial_get_char(serial);
  }
#+END_SRC

*** Send string
Just take char by char and send them until the "\0" character.

#+BEGIN_SRC c
void serial_send_string(char *s){
#+END_SRC

Define the index for getting each character at zero.

#+BEGIN_SRC c
unsigned int i = 0;
#+END_SRC

Get the first character.

#+BEGIN_SRC c
char c = s[i];
#+END_SRC

If not the "\0" send it and repeat with the next character.

#+BEGIN_SRC c
  while (c){
    serial_put_char(c);
    i++;
    c = s[i];
  }
#+END_SRC

All character sendend! Return.

#+BEGIN_SRC c
}
#+END_SRC

*** Send an integer

#+BEGIN_SRC c
void serial_send_integer(int number){
#+END_SRC

Declare a string which can have the amount of characters needed for the maximum string (65536 for unsigned int of 2 bytes, plus sign and "\0" character).

#+BEGIN_SRC c
char s[100];
#+END_SRC

Help with an index.

#+BEGIN_SRC c
uint8_t i = 0;
#+END_SRC

Convert the sign and remove it from ~number~.

#+BEGIN_SRC c
  if (number < 0){
    number = number * -1;
    s[i] = '-';
    i++;
   }
#+END_SRC

Convert each of the digits. 

#+BEGIN_SRC c
  while (number) {
#+END_SRC

Get the first digit and remove it from the ~number~ variable.

#+BEGIN_SRC c
  uint8_t digit = number % 10;
  number = number/10;
#+END_SRC


Transform the digit into ASCII (simply add the amount with the character '0' in ASCII).

Add the character to the string and add one to the index. Repeat.

#+BEGIN_SRC c
  s[i] = digit + '0';
  i++;
 }
#+END_SRC

Add the "\0" character.

#+BEGIN_SRC c
s[i] = '\0';
#+END_SRC
**** Invert the String
First ignore the sign if there are any. 

#+BEGIN_SRC c
int j = 0;
if (s[0] == '-'){
  j = 1;
}
#+END_SRC

~i~ has the last position of the string. Swap the last character with the first (for example ~-54321~ \to ~-14325~). Use ~j~ to keep the left index. Repeat until the left index passes through the rignt index (when ~i > j~).

#+BEGIN_SRC c
for (i=i-1; i > j ; i--){
  char c = s[i];
  s[i] = s[j];
  s[j] = c;
  j++;
}
#+END_SRC

Now, send the string as usual.

#+BEGIN_SRC c
  serial_send_string(s);
#+END_SRC

#+BEGIN_SRC c
}
#+END_SRC

*** Send an hexadecimal number
#+BEGIN_SRC c
void serial_send_hex(uint8_t number){
#+END_SRC

Send the first digit. 

#+BEGIN_SRC c
char s[3] = "\0\0\0";
uint8_t digit1 = (number>>4);
if (digit1 < 10){
  s[0] = digit1 + '0';
}
#+END_SRC

If it is a number greater than 10 (0xA) then send the letter accordingly.

#+BEGIN_SRC c
switch (digit1){
  case 10:
    s[0] = 'A';
    break;
  case 11:
    s[0] = 'B';
    break;
  case 12:
    s[0] = 'C';
    break;
  case 13:
    s[0] = 'D';
    break;
  case 14:
    s[0] = 'E';
    break;
  case 15:
    s[0] = 'F';
    break;
}
#+END_SRC

Same algorithm for the second digit.

#+BEGIN_SRC c
uint8_t digit2 = (number & 0b00001111);
if (digit2 < 10){
  s[1] = digit2 + '0';
}

switch (digit2){
  case 10:
    s[1] = 'A';
    break;
  case 11:
    s[1] = 'B';
    break;
  case 12:
    s[1] = 'C';
    break;
  case 13:
    s[1] = 'D';
    break;
  case 14:
    s[1] = 'E';
    break;
  case 15:
    s[1] = 'F';
    break;
}
#+END_SRC

Send the string.

#+BEGIN_SRC c
serial_send_string(s);
#+END_SRC


#+BEGIN_SRC c
} // serial_send_hex
#+END_SRC


* Test Send
  :PROPERTIES:
  :header-args: :comments no :padline yes :tangle tests/usart_send.c
  :END:

  A main program to tests the functions that sends characters or strings.

  
** License

  #+BEGIN_SRC c
    /* 
      Copyright 2019 Christian Gimenez
   
      Author: Christian Gimenez   

      usart_send.h
   
      This program is free software: you can redistribute it and/or modify
      it under the terms of the GNU General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
   
      This program is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU General Public License for more details.
   
      You should have received a copy of the GNU General Public License
      along with this program.  If not, see <http://www.gnu.org/licenses/>.
    ,*/
  #+END_SRC

** Includes
Include the library.

#+BEGIN_SRC c
  #include "../usart-lib.h"
#+END_SRC

** Main
Start the main program.

#+BEGIN_SRC c
      void main(){
#+END_SRC

Initialize the USART library.

#+BEGIN_SRC c
      serial_init();
#+END_SRC

Send a character, a string and a number.

#+BEGIN_SRC c
      serial_put_char('R');
      serial_put_char('\n');
      serial_put_char('\r');
      serial_send_string("Hello world\n\r");
      serial_send_integer(-12345);
#+END_SRC

End of the main function.

#+BEGIN_SRC c
      }
#+END_SRC

* Test with Minicom
Use the minicom to test the program considering the following parameters and configurations: baud rate, amount of stop bits and type of parity check if enabled.

For this program configuration and supposing that Arduino is connected at /dev/ttyUSB0 port, the minicom can be executed with this command:

: sudo minicom -b 9600 -D /dev/ttyUSB0 

Ensure that 9600 8N1 is enabled. 8N1 means:

- characters of 8 bits
- no parity checks
- 1 stop bit 






* Meta     :noexport:

  # ----------------------------------------------------------------------
  #+TITLE:  USART Library in C
  #+AUTHOR: Christian Gimenez
  #+DATE:   11 jun 2019
  #+EMAIL:
  #+DESCRIPTION: 
  #+KEYWORDS: 

  #+STARTUP: inlineimages hidestars content hideblocks entitiespretty indent fninline latexpreview
  #+TODO: TODO(t!) CURRENT(c!) PAUSED(p!) | DONE(d!) CANCELED(C!@)
  #+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:{} -:t f:t *:t <:t
  #+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc tex:imagemagick
  #+LINK_UP:   
  #+LINK_HOME: 
  #+XSLT:

  # -- HTML Export
  #+INFOJS_OPT: view:info toc:t ftoc:t ltoc:t mouse:underline buttons:t path:libs/org-info.js
  #+EXPORT_SELECT_TAGS: export
  #+EXPORT_EXCLUDE_TAGS: noexport
  #+HTML_LINK_UP: ../../index.html
  #+HTML_LINK_HOME: ../../index.html

  # -- For ox-twbs or HTML Export
  #+HTML_HEAD: <link href="../../libs/bootstrap.min.css" rel="stylesheet">
  #+HTML_HEAD: <script src="../../libs/jquery.min.js"></script> 
  #+HTML_HEAD: <script src="../../libs/bootstrap.min.js"></script>
  #+LANGUAGE: en

  # Local Variables:
  # org-hide-emphasis-markers: t
  # org-use-sub-superscripts: "{}"
  # fill-column: 80
  # visual-line-fringe-indicators: t
  # ispell-local-dictionary: "british"
  # End:
